parameters:
  subscription: ''
  environmentPrefix: ''
  environment: ''
  cipEnvironment: ''
  module: ''
  workspaceDir: '$(Pipeline.Workspace)'
  location: 'westeurope'
  disablePurgeProtection: ''
  imageName: ''
  supportAlertEmail: ''
  planOnly: ''
  redirectWebProvision: ''
  shutterWebProvision: ''
  shutterWebEnabled: ''

steps:
  - task: ExtractFiles@1
    displayName: 'Extract terraform Files'
    inputs:
      archiveFilePatterns: '$(Pipeline.Workspace)/${{ parameters.module }}-terraform/terraform.zip'
      destinationFolder: '${{ parameters.workspaceDir }}/tf'

  - task: AzureCLI@1
    displayName: 'Create terraform dependencies'
    inputs:
      azureSubscription: ${{ parameters.subscription }}
      scriptLocation: inlineScript
      inlineScript: |
        az group create --location ${{ parameters.location }} --name ${{ parameters.environmentPrefix }}-ebis-terraform --tags "Environment=${{ parameters.cipEnvironment }}" "Product=DfE Financial Benchmarking service"
        echo "Resource group created"
        
        storageAccountName=${{ parameters.environmentPrefix }}storagetf
        az storage account create --name $storageAccountName --resource-group ${{ parameters.environmentPrefix }}-ebis-terraform --location ${{ parameters.location }} --sku Standard_LRS --kind StorageV2 --https-only true --min-tls-version TLS1_2
        echo "Storage account created"
        
        az storage account blob-service-properties update --account-name $storageAccountName --resource-group ${{ parameters.environmentPrefix }}-ebis-terraform --enable-delete-retention true --delete-retention-days 7 --container-retention true --container-days 7 --enable-versioning true
        echo "Storage account properties updated"

        az storage container create --auth-mode login --name tfstate --account-name $storageAccountName
        echo "Storage container created"
        
        echo "##vso[task.setvariable variable=environmentPrefix]${{ parameters.environmentPrefix }}"
        echo "##vso[task.setvariable variable=environment]${{ parameters.environment }}"
        echo "##vso[task.setvariable variable=cipEnvironment]${{ parameters.cipEnvironment }}"
        echo "##vso[task.setvariable variable=location]${{ parameters.location }}"
        echo "##vso[task.setvariable variable=azureRmStorageAccountName]$storageAccountName"
        echo "##vso[task.setvariable variable=disablePurgeProtection]${{ parameters.disablePurgeProtection }}"
        echo "##vso[task.setvariable variable=imageName]${{ parameters.imageName }}"
        echo "##vso[task.setvariable variable=supportAlertEmail]${{ parameters.supportAlertEmail }}"
        echo "##vso[task.setvariable variable=redirectAppServiceProvision]${{ parameters.redirectWebProvision }}"
        echo "##vso[task.setvariable variable=shutterAppServiceProvision]${{ parameters.shutterWebProvision }}"
        echo "##vso[task.setvariable variable=shutterAppServiceEnabled]${{ parameters.shutterWebEnabled }}"

  - task: qetza.replacetokens.replacetokens-task.replacetokens@6
    displayName: 'Replace tokens in terraform file'
    inputs:
      sources: '${{ parameters.workspaceDir }}/tf/terraform.tfvars'
      escape: off
      tokenPattern: doubleunderscores

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
    displayName: 'Install terraform'
    inputs:
      terraformVersion: 1.9.8

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@1
    displayName: 'Initialise terraform'
    inputs:
      command: init
      backendType: 'azurerm'
      workingDirectory: '${{ parameters.workspaceDir }}/tf'
      environmentServiceName: ${{ parameters.subscription }}
      backendServiceArm: ${{ parameters.subscription }}
      backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
      backendAzureRmStorageAccountName: $(azureRmStorageAccountName)
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: education-benchmarking-${{ parameters.module }}.tfstate
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@1
    displayName: 'Run terraform plan'
    inputs:
      command: plan
      backendType: 'azurerm'
      commandOptions: '-input=false -out=${{ parameters.workspaceDir }}\education-benchmarking-${{ parameters.module }}.plan'
      workingDirectory: '${{ parameters.workspaceDir }}/tf'
      environmentServiceName: ${{ parameters.subscription }}
      backendServiceArm: ${{ parameters.subscription }}
      backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
      backendAzureRmStorageAccountName: $(azureRmStorageAccountName)
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: education-benchmarking-${{ parameters.module }}.tfstate
      publishPlanResults: '${{ parameters.environmentPrefix }}-${{ parameters.module }}-plan'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@1
    displayName: 'Run terraform apply'
    condition: and(succeeded(), ne('${{ parameters.planOnly }}', 'true'))
    inputs:
      command: apply
      backendType: 'azurerm'
      workingDirectory: '${{ parameters.workspaceDir }}/tf'
      commandOptions: '-auto-approve -input=false ${{ parameters.workspaceDir }}\education-benchmarking-${{ parameters.module }}.plan'
      environmentServiceName: ${{ parameters.subscription }}
      backendServiceArm: ${{ parameters.subscription }}
      backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
      backendAzureRmStorageAccountName: $(azureRmStorageAccountName)
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: education-benchmarking-${{ parameters.module }}.tfstate
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}