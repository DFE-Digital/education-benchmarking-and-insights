parameters:
  subscription: ''
  environmentPrefix: ''
  environment: ''
  cipEnvironment: ''
  module: ''
  location: 'westeurope'

steps:
  - task: AzureCLI@1
    displayName: 'Create terraform dependencies'
    inputs:
      azureSubscription: ${{ parameters.subscription }}
      scriptLocation: inlineScript
      inlineScript: |
        storageAccountName=${{ parameters.environmentPrefix }}storagetf
        echo "##vso[task.setvariable variable=environmentPrefix]${{ parameters.environmentPrefix }}"
        echo "##vso[task.setvariable variable=environment]${{ parameters.environment }}"
        echo "##vso[task.setvariable variable=cipEnvironment]${{ parameters.cipEnvironment }}"
        echo "##vso[task.setvariable variable=location]${{ parameters.location }}"
        echo "##vso[task.setvariable variable=azureRmStorageAccountName]$storageAccountName"

        skipSync=false
        resourceGroup=$(az group show --name ${{ parameters.environmentPrefix }}-ebis-${{ parameters.module }} -o tsv 2>nul)
        if [[ $resourceGroup == "" ]]; then
          skipSync=true
        fi
        echo "##vso[task.setvariable variable=SkipSync]$skipSync"

  - task: qetza.replacetokens.replacetokens-task.replacetokens@6
    condition: and(succeeded(), ne(variables['SkipSync'], 'true'))
    displayName: 'Replace tokens in terraform file'
    inputs:
      sources: '${{ parameters.workspaceDir }}/terraform.tfvars'
      escape: off
      tokenPattern: doubleunderscores

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
    condition: and(succeeded(), ne(variables['SkipSync'], 'true'))
    displayName: 'Install terraform'
    inputs:
      terraformVersion: 1.9.0

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    condition: and(succeeded(), ne(variables['SkipSync'], 'true'))
    displayName: 'Initialise terraform'
    inputs:
      command: init
      backendType: 'azurerm'
      workingDirectory: ${{ parameters.workspaceDir }}
      environmentServiceName: ${{ parameters.subscription }}
      backendServiceArm: ${{ parameters.subscription }}
      backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
      backendAzureRmStorageAccountName: $(azureRmStorageAccountName)
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: education-benchmarking-${{ parameters.module }}.tfstate
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    condition: and(succeeded(), ne(variables['SkipSync'], 'true'))
    displayName: 'Run terraform plan'
    inputs:
      command: plan
      backendType: 'azurerm'
      commandOptions: '-input=false -out=${{ parameters.workspaceDir }}\education-benchmarking-${{ parameters.module }}.plan'
      workingDirectory: ${{ parameters.workspaceDir }}
      environmentServiceName: ${{ parameters.subscription }}
      backendServiceArm: ${{ parameters.subscription }}
      backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
      backendAzureRmStorageAccountName: $(azureRmStorageAccountName)
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: education-benchmarking-${{ parameters.module }}.tfstate
      publishPlanResults: '${{ parameters.environmentPrefix }}-${{ parameters.module }}-plan'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}

  - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    condition: and(succeeded(), ne(variables['SkipSync'], 'true'))
    displayName: 'Run terraform apply'
    inputs:
      command: apply
      backendType: 'azurerm'
      workingDirectory: ${{ parameters.workspaceDir }}
      commandOptions: '-auto-approve -input=false ${{ parameters.workspaceDir }}\education-benchmarking-${{ parameters.module }}.plan'
      environmentServiceName: ${{ parameters.subscription }}
      backendServiceArm: ${{ parameters.subscription }}
      backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
      backendAzureRmStorageAccountName: $(azureRmStorageAccountName)
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: education-benchmarking-${{ parameters.module }}.tfstate
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}