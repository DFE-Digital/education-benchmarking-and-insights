steps:
  - bash: |
      echo "##vso[task.setvariable variable=CACHE_RESTORED]false"
      echo "##vso[task.setvariable variable=NUGET_PACKAGES]$(Pipeline.Workspace)/.nuget/test/packages"

  - task: NuGetAuthenticate@1

  - task: Cache@2
    condition: not(contains(variables['Build.SourceVersionMessage'], '[no cache]'))
    displayName: 'Cache nuget packages'
    inputs:
      key: 'nuget | "$(Agent.OS)-tests" | platform/**/*.Tests*/packages.lock.json,!**/bin/**,!**/obj/**'
      path: $(NUGET_PACKAGES)
      cacheHitVar: CACHE_RESTORED

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    condition: ne(variables.CACHE_RESTORED, 'true')
    inputs:
      command: restore
      projects: 'platform/**/*.Tests.csproj'
      packagesDirectory: $(NUGET_PACKAGES)
      feedsToUse: 'config'
      nugetConfigPath: 'platform/nuget.config'

  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests'
    inputs:
      command: test
      packagesDirectory: $(NUGET_PACKAGES)
      arguments: '--configuration Release --logger "console;verbosity=detailed" --logger "trx;LogFilePrefix=testResults" --collect "XPlat Code Coverage" --settings platform/tests/coverlet.runsettings'
      projects: 'platform/**/*.Tests.csproj'

  - task: PublishCodeCoverageResults@2
    displayName: 'Publish code coverage report'
    inputs:
      summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - task: BuildQualityChecks@9
    displayName: 'Check build quality'
    inputs:
      checkCoverage: true
      coverageType: lines
      coverageFailOption: fixed
      coverageThreshold: 80