pool:
  vmImage: 'ubuntu-20.04'

variables:
  - name: 'zapDir'
    value: '$(Pipeline.Workspace)/zap'
  - name: 'cacheKey'
    value: $[format('{0:yyyyMMdd}', pipeline.startTime)]
  - name: 'ShouldPublish'
    value: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))]
  - group: 'security scan settings'

trigger: none

pr: none

jobs:
  - job: SetBuildTags
    displayName: 'Set build tags'
    steps:
      - checkout: none
      - bash: |        
          echo "##vso[build.addbuildtag]Platform"
          echo "##vso[build.addbuildtag]ZAP"

  - job: Setup
    displayName: 'Pull and cache docker image'
    steps:
      - checkout: none
      - task: Cache@2
        displayName: Cache task
        inputs:
          key: 'docker | "$(Agent.OS)" | zap-$(cacheKey)'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED

      - task: Docker@2
        displayName: Docker pull
        condition: ne(variables.CACHE_RESTORED, 'true')
        inputs:
          command: pull
          arguments: ghcr.io/zaproxy/zaproxy:stable

      - script: |
          mkdir -p $(Pipeline.Workspace)/docker
          docker save -o $(Pipeline.Workspace)/docker/zap.tar ghcr.io/zaproxy/zaproxy:stable
        displayName: Docker save
        condition: ne(variables.CACHE_RESTORED, 'true')

  - job: RunScan
    displayName: 'Run scan'
    dependsOn: [ Setup ]
    timeoutInMinutes: 0
    strategy:
      maxParallel: 3
      matrix:
        benchmark:
          url: $(security-scan-platform-benchmark-api)
          key: benchmark
        establishment:
          url: $(security-scan-platform-establishment-api)
          key: establishment
        insight:
          url: $(security-scan-platform-insight-api)
          key: insight
    steps:
      - task: AzureKeyVault@2
        inputs:
          azureSubscription: 's198d.azdo-deployment'
          KeyVaultName: 's198d01-ebis-keyvault'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: Cache@2
        displayName: 'Cache restore'
        inputs:
          key: 'docker | "$(Agent.OS)" | zap-$(cacheKey)'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/zap.tar
        displayName: 'Docker restore'
        condition: eq(variables.CACHE_RESTORED, 'true')

      - task: CmdLine@2
        inputs:
          script: 'mkdir $(zapDir)'
        displayName: "Create zap directory"

      - task: CmdLine@2
        inputs:
          script: 'chmod 777 -R $(zapDir)'
        displayName: "Set chmod permissions"

      - task: qetza.replacetokens.replacetokens-task.replacetokens@6
        displayName: 'Replace tokens in file'
        inputs:
          sources: '$(Build.SourcesDirectory)/pipelines/platform/zaproxy/*.prop'
          escape: off
          tokenPattern: doubleunderscores

      - task: CmdLine@2
        inputs:
          script: 'cp $(Build.SourcesDirectory)/pipelines/platform/zaproxy/{$(key).prop,.artifactignore,config.conf} $(zapDir)'
        displayName: "Copy files"

      - task: Docker@2
        displayName: 'Execute scan'
        continueOnError: true
        inputs:
          command: run
          arguments: --rm -v $(zapDir):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py -t $(url) -c config.conf -f openapi -d -T 20 -r $(key)-report.html -w $(key)-report.md -z "-configfile /zap/wrk/$(key).prop"

      - task: PublishPipelineArtifact@1
        displayName: "Publish reports"
        inputs:
          targetPath: '$(zapDir)'
          artifact: '$(key)'
          publishLocation: 'pipeline'

  - job: GitHubPublish
    displayName: 'Publish artifacts to GitHub'
    dependsOn: [ RunScan ]
    condition: and(succeeded(), eq(variables['ShouldPublish'],'true'))

    steps:
      - checkout: self
        persistCredentials: true

      - template: ..\common\push-repo-artifacts.yaml
        parameters:
          ArtifactPattern: '**/*.md'
          BranchName: 'doc/$(Build.BuildNumber)/platform-security-scan'
          CommitMessage: 'Updated platform security scan documentation'
          CommitTag: 'doc'
          PostProcessScript: |
            find . -type f \( -wholename "./benchmark/*.md" -o -wholename "./establishment/*.md" -o -wholename "./insight/*.md" \) -exec sh -c 'echo "\\\newpage" >> "$1"' _ {} \;
            find . -type f \( -wholename "./benchmark/*.md" -o -wholename "./establishment/*.md" -o -wholename "./insight/*.md" \) -exec mv '{}' . \;
          TargetPath: 'documentation/quality-assurance/security-scan-reports'