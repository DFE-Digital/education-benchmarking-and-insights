pool:
  vmImage: 'ubuntu-latest'

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - shared
      - platform

pr:
  paths:
    include:
      - platform

parameters:
  - name: featureName
    displayName: 'Name of development feature to deploy (or empty for standard Dev deploy)'
    type: string
    default: ' '

variables:
  Version.Revision: $[counter(variables['Build.SourceBranchName'], 0)]
  Version.BuildNumber: 0.0.$(Version.Revision)
  Version.BuildVersion: $(Version.BuildNumber)
  Version.FeatureName: ${{ parameters.featureName }}
  NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS: 30
  NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS: 30
  TerraformFolder: 'platform/terraform'
  TerraformDirectory: '$(System.DefaultWorkingDirectory)/$(TerraformFolder)'
  ShouldDeploy: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))]
  ShouldDeployFeature: $[and(ne('${{ parameters.featureName }}', ' '), eq(variables['Build.Reason'], 'Manual'))]

stages:
  - stage: Build
    displayName: 'Build artifacts'
    jobs:
      - job: SetBuildNumber
        displayName: 'Set build number'
        steps:
          - checkout: none
          - bash: |
              echo "##vso[task.setvariable variable=Version.BuildNumber]$(Version.BuildNumber)"
              echo "##vso[task.setvariable variable=Version.BuildVersion]$(Version.BuildNumber)"
              echo "##vso[build.updatebuildnumber]$(Version.BuildNumber)"
              echo "##vso[build.addbuildtag]$(Version.BuildNumber)"
              echo "##vso[build.addbuildtag]Platform"
              if [[ "$(ShouldDeployFeature)" == "True" ]]; then
                echo "##vso[build.addbuildtag]Feature ($(Version.FeatureName))"
              fi
            displayName: 'Set release build number'

      - job: FmtValidateTf
        displayName: "Lint and validate terraform"
        steps:
          - template: ..\common\fmt-validate-terraform.yaml
            parameters:
              TerraformDirectory: $(TerraformDirectory)

      - job: RunCheckOv
        displayName: "Static analysis terraform"
        steps:
          - template: ..\common\scan-terraform.yaml
            parameters:
              TerraformDirectory: $(TerraformDirectory)
              ContinueOnError: true

      - job: ZipStaticArtifacts
        displayName: 'Zip static artifacts'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        steps:
          - template: ..\common\publish-terraform-artifacts.yaml
            parameters:
              TerraformFolder: $(TerraformFolder)
              Module: 'platform'

      - job: RunFormat
        displayName: 'Format solution'
        steps:
          - template: ..\common\dotnet-format.yaml
            parameters:
              SolutionDirectory: '$(System.DefaultWorkingDirectory)/platform'

      - job: RunTests
        displayName: 'Run unit tests'
        steps:
          - template: steps\run-unit-tests.yaml

      - job: BuildApiTests
        displayName: 'Build platform api tests'
        steps:
          - template: steps\build-api-tests.yaml

      - job: BuildPlatform
        dependsOn: [ SetBuildNumber ]
        displayName: 'Build platform'
        steps:
          - template: steps\build.yaml
            parameters:
              BuildVersion: $(Version.BuildVersion)
              BuildNumber: $(Version.BuildNumber)

  - stage: DeployDevelopment
    dependsOn: [ Build ]
    displayName: 'Development'
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d01'
          environment: 'development'
          cipEnvironment: 'Dev'

  - stage: DeployAutomatedTest
    dependsOn: [ Build ]
    displayName: 'Automated test'
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d02'
          environment: 'automated-test'
          cipEnvironment: 'Dev'

      - job: RunApiTests
        dependsOn: [ PlatformDeployment ]
        displayName: 'Run automated api tests'
        steps:
          - template: steps\run-api-tests.yaml
            parameters:
              workspaceDir: '$(Pipeline.Workspace)'
              subscription: 's198d.azdo-deployment'
              environmentPrefix: 's198d02'

  - stage: DeployTest
    dependsOn: [ DeployAutomatedTest ]
    displayName: 'Test'
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198t.azdo-deployment'
          environmentPrefix: 's198t01'
          environment: 'test'
          cipEnvironment: 'Test'
          runSearchApp: false
          
  - stage: DeployFeature
    dependsOn: [ Build ]
    displayName: 'Feature'
    condition: and(succeeded(), eq(variables['ShouldDeployFeature'],'true'))
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d01-$(Version.FeatureName)'
          environment: 'feature'
          cipEnvironment: 'Dev'
