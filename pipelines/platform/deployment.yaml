parameters:
  subscription: ''
  environmentPrefix: ''
  environment: ''
  cipEnvironment: ''
  workspaceDir: '$(Pipeline.Workspace)'
  runSearchApp: true
  dependsOn: []

jobs:
  - deployment: PlatformProvision
    displayName: 'Platform : Provision'
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      vmImage: ubuntu-latest
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none

            - download: current

            - template: ..\common\run-terraform.yaml
              parameters:
                subscription: ${{ parameters.subscription }}
                environmentPrefix: ${{ parameters.environmentPrefix }}
                environment: ${{ parameters.environment }}
                cipEnvironment: ${{ parameters.cipEnvironment }}
                module: 'platform'

  - deployment: PlatformDeployment
    displayName: 'Platform : Deployment'
    dependsOn: [ PlatformProvision ]
    pool:
      vmImage: ubuntu-latest
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none
            - download: current      

            - task: AzureKeyVault@1
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                KeyVaultName: '${{ parameters.environmentPrefix }}-ebis-keyvault'
                SecretsFilter: '*'
                RunAsPreJob: true

            - task: ExtractFiles@1
              condition: and(succeeded(), ${{ parameters.runSearchApp }})
              displayName: 'Extract platform search app'
              inputs:
                archiveFilePatterns: '${{ parameters.workspaceDir }}/platform-search/Platform.Search.App.zip'
                destinationFolder: '${{ parameters.workspaceDir }}/search-app'

            - script: ./Platform.Search.App -s '${{ parameters.environmentPrefix }}-ebis-search' -k '$(ebis-search-admin-key)' -c '$(core-sql-connection-string)'
              condition: and(succeeded(), ${{ parameters.runSearchApp }})
              displayName: 'Run platform search app'
              workingDirectory: '${{ parameters.workspaceDir }}/search-app'
              failOnStderr: true

            - task: AzureFunctionApp@1
              displayName: 'Deploy benchmarks function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-benchmark-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/Platform.Api.Benchmark.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'

            - task: AzureFunctionApp@1
              displayName: 'Deploy insights function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-insight-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/Platform.Api.Insight.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'

            - task: AzureFunctionApp@1
              displayName: 'Deploy establishments function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-establishment-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/Platform.Api.Establishment.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'

            - task: AzureFunctionApp@1
              displayName: 'Deploy orchestrator function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-orchestrator-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/Platform.Orchestrator.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'

            - task: AzureFunctionApp@1
              displayName: 'Deploy data clean up function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-clean-up-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/Platform.UserDataCleanUp.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'

  - deployment: ReleaseAnnotation
    displayName: 'Platform : Release Annotation'
    dependsOn: [ PlatformDeployment ]
    pool:
      vmImage: ubuntu-latest
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: AzureCLI@2
              displayName: 'Add release annotation to Application Insights'
              continueOnError: true
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                scriptType: pscore
                scriptLocation: scriptPath
                scriptPath: "$(Agent.BuildDirectory)/s/pipelines/common/scripts/CreateReleaseAnnotation.ps1"
                arguments: '
                  -appInsightsResourceName ${{ parameters.environmentPrefix }}-ebis-ai `
                  -releaseName "$(Build.Repository.Name) - $(Build.BuildNumber)" `
                  -releaseProperties @{
                  "BuildNumber"="$(Build.BuildNumber)";
                  "BuildRepositoryName"="$(Build.Repository.Name)";
                  "BuildRepositoryProvider"="$(Build.Repository.Provider)";
                  "ReleaseDefinitionName"="$(Build.DefinitionName)";
                  "ReleaseDescription"="Triggered by $(Build.DefinitionName) $(Build.BuildNumber)";
                  "SourceBranch"="$(Build.SourceBranch)" }'