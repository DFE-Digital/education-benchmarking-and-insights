pool:
  vmImage: 'ubuntu-latest'

trigger: none

pr: none

parameters:
  - name: environment
    displayName: 'Environment associated with feature'
    type: string
    default: development
    values:
      - development
      - pre-production
  - name: featureEnvironment
    displayName: 'Target feature environment to create or update'
    type: string
    default: ''
    values:
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 18
      - 19
  - name: customBuildNumber
    displayName: 'Custom build number'
    type: string
    default: ' '

variables:
  Version.BranchRevision: $[counter(variables['Build.SourceBranchName'], 0)]
  Version.FeatureEnvironment: ${{ parameters.featureEnvironment }}
  Version.BuildNumber: 1.$(Version.FeatureEnvironment).$(Version.BranchRevision)
  Version.BuildVersion: $(Version.BuildNumber)
  Environment.Name: ${{ parameters.environment }}
  Pipeline.Environment: 'feature'
  Subscription: 's198d.azdo-deployment'
  WorkingDir.Core: 'core-infrastructure'
  WorkingDir.FrontEnd: 'front-end-components'
  WorkingDir.Platform: 'platform'
  WorkingDir.Web: 'web'
  WorkingDir.DataPipeline: 'data-pipeline'
  NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS: 30
  NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS: 30

stages:
  - stage: BuildNumber
    displayName: 'Define build number'
    jobs:
      - job: SetBuildNumber
        displayName: 'Set build number'
        steps:
          - checkout: none
          - bash: |
              if [[ "${{ parameters.customBuildNumber }}" == "" || "${{ parameters.customBuildNumber }}" == " " ]]; then
                buildNumber=$(Version.BuildNumber)
              else
                buildNumber=${{ parameters.customBuildNumber }}
              fi

              echo "##vso[task.setvariable variable=Version_BuildNumber;isOutput=true]$buildNumber"
              echo "##vso[task.setvariable variable=Version_BuildVersion;isOutput=true]$buildNumber"
              environmentPrefix=s198d$(Version.FeatureEnvironment)
              if [[ "$(Environment.Name)" == "pre-production" ]]; then
                environmentPrefix=s198p$(Version.FeatureEnvironment)
              fi

              echo "##vso[task.setvariable variable=Environment_Prefix;isOutput=true]$environmentPrefix"
              echo "##vso[build.updatebuildnumber]$buildNumber"
              echo "##vso[build.addbuildtag]$buildNumber"
              echo "##vso[build.addbuildtag]Environment $(Version.FeatureEnvironment)"
              echo "##vso[task.setvariable variable=Version_FrontEnd;isOutput=true]$buildNumber-$environmentPrefix.0"
            displayName: 'Set release build number'
            name: outputVars

  - stage: DeployCore
    dependsOn: [ BuildNumber ]
    displayName: 'Core : Deploy'
    variables: 
      environmentPrefix: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Environment_Prefix'] ]
      buildNumber: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildNumber'] ]
      buildVersion: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildVersion'] ]
    jobs:
      - job: ZipStaticCoreArtifacts
        displayName: 'Zip static artifacts'
        steps:
          - template: ..\common\publish-terraform-artifacts.yaml
            parameters:
              TerraformFolder: '$(System.DefaultWorkingDirectory)/$(WorkingDir.Core)/terraform'
              Module: 'core'

      - job: BuildCore
        displayName: 'Core : Build'
        steps:
          - template: ../core-infrastructure/steps/build.yaml
            parameters:
              BuildVersion: $(buildVersion)
              BuildNumber: $(buildNumber)

      - template: ../core-infrastructure/deployment.yaml
        parameters:
          subscription: $(Subscription)
          environmentPrefix: $(environmentPrefix)
          environment: $(Pipeline.Environment)
          cipEnvironment: 'Dev'
          dependsOn: [ ZipStaticCoreArtifacts, BuildCore ]
          disablePurgeProtection: 'true'

  - stage: BuildDataPipeline
    dependsOn: [ BuildNumber, DeployCore ]
    displayName: 'Data Pipeline : Build and Deploy'
    variables:
      environmentPrefix: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Environment_Prefix'] ]
      buildNumber: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildNumber'] ]
      buildVersion: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildVersion'] ]
    jobs:
      - job: ZipStaticDataPipelineArtifacts
        displayName: 'Zip static artifacts'
        steps:
          - template: ..\common\publish-terraform-artifacts.yaml
            parameters:
              TerraformFolder: '$(System.DefaultWorkingDirectory)/$(WorkingDir.DataPipeline)/terraform'
              Module: 'data-pipeline'

      - job: BuildAndPushDataPipeline
        dependsOn: [ ZipStaticDataPipelineArtifacts ]
        displayName: 'Build and push image'
        steps: 
          - template: ../data-pipeline/steps/build-push-image.yaml
            parameters:
              buildNumber: $(buildNumber)
              environmentPrefix: $(environmentPrefix)
              subscription: $(Subscription)

      - template: ../data-pipeline/deployment.yaml
        parameters:
          subscription: $(Subscription)
          sourceServicePrincipal: 's198d.azdo-deployment'
          environmentPrefix: $(environmentPrefix)
          environment: $(Pipeline.Environment)
          cipEnvironment: 'Dev'
          importImage: false
          buildNumber: $(buildNumber)
          dependsOn: [ BuildAndPushDataPipeline ]

  - stage: BuildPlatform
    dependsOn: [ BuildNumber, DeployCore, BuildDataPipeline ]
    displayName: 'Platform : Build and Deploy'
    variables: 
      environmentPrefix: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Environment_Prefix'] ]
      buildNumber: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildNumber'] ]
      buildVersion: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildVersion'] ]
    jobs:
      - job: ZipStaticPlatformArtifacts
        displayName: 'Zip static artifacts'
        steps:
          - template: ..\common\publish-terraform-artifacts.yaml
            parameters:
              TerraformFolder: '$(System.DefaultWorkingDirectory)/$(WorkingDir.Platform)/terraform'
              Module: 'platform'

      - job: BuildPlatform
        displayName: 'Platform : Build'
        steps:
          - template: ../platform/steps/build.yaml
            parameters:
              BuildVersion: $(buildVersion)
              BuildNumber: $(buildNumber)

      - template: ../platform/deployment.yaml
        parameters:
          subscription: $(Subscription)
          environmentPrefix: $(environmentPrefix)
          environment: $(Pipeline.Environment)
          cipEnvironment: 'Dev'
          dependsOn: [ ZipStaticPlatformArtifacts, BuildPlatform ]

  - stage: BuildFrontEndComponents
    dependsOn: [ BuildNumber, BuildPlatform ]
    displayName: 'Front-end : Build and Publish'
    variables: 
      frontEndVersion: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_FrontEnd'] ]
    jobs:
      - job: BuildAndRPublishFrontEnd
        displayName: 'Build and publish'
        steps:
          - task: Npm@1
            displayName: 'Update version number'
            continueOnError: false
            inputs:
              command: 'custom'
              customCommand: 'version $(frontEndVersion)'
              workingDir: $(WorkingDir.FrontEnd)
              verbose: false

          - task: Npm@1
            displayName: 'Install dependencies'
            inputs:
              command: 'install'
              workingDir: $(WorkingDir.FrontEnd)

          - task: Npm@1
            displayName: 'Build project'
            inputs:
              command: 'custom'
              customCommand: 'run build'
              workingDir: $(WorkingDir.FrontEnd)

          - task: Npm@1
            displayName: 'Publish'
            continueOnError: false
            inputs:
              command: 'publish'
              publishRegistry: useFeed
              publishFeed: 'S198-DfE-Benchmarking-service/education-benchmarking'
              workingDir: $(WorkingDir.FrontEnd)
              verbose: false

  - stage: BuildWeb
    dependsOn: [ BuildNumber, BuildFrontEndComponents ]
    displayName: 'Web : Build and Deploy'
    variables:
      - group: 'dsi pre-prod'
      - name: environmentPrefix
        value: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Environment_Prefix'] ]
      - name: frontEndVersion
        value: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_FrontEnd'] ]
      - name: buildNumber
        value: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildNumber'] ]
      - name: buildVersion
        value: $[ stageDependencies.BuildNumber.SetBuildNumber.outputs['outputVars.Version_BuildVersion'] ]
    jobs:
      - job: ZipStaticWebArtifacts
        displayName: 'Zip static artifacts'
        steps:
          - template: ..\common\publish-terraform-artifacts.yaml
            parameters:
              TerraformFolder: '$(System.DefaultWorkingDirectory)/$(WorkingDir.Web)/terraform'
              Module: 'web'

      - job: BuildWeb
        displayName: 'Web : Build'
        steps:
          - template: ../web/steps/build.yaml
            parameters:
              BuildVersion: $(buildVersion)
              BuildNumber: $(buildNumber)
              frontEndVersion: $(frontEndVersion)

      - template: ../web/deployment.yaml
        parameters:
          subscription: $(Subscription)
          environmentPrefix: $(environmentPrefix)
          environment: $(Pipeline.Environment)
          cipEnvironment: 'Dev'
          dependsOn: [ ZipStaticWebArtifacts, BuildWeb ]




