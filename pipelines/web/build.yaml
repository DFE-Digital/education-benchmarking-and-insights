pool:
  vmImage: 'ubuntu-latest'

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - web
      - pipelines/web
      - pipelines/common

pr:
  paths:
    include:
      - web

variables:
  - template: ..\common\vars.yaml
  - name: TerraformFolder
    value: 'web/terraform'
  - name: TerraformDirectory
    value: '$(System.DefaultWorkingDirectory)/$(TerraformFolder)'
  - name: NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS
    value: 30
  - name: NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS
    value: 30

name: $(Version)$(Version.Revision.Separator)$(Version.Revision).$(Rev:r)

stages:
  - stage: Build
    displayName: 'Build artifacts'
    jobs:
      - job: BranchValidate
        displayName: "Validate branch name"
        steps:
          - checkout: none
          - template: ..\common\validate-branch.yaml
            parameters:
              branchName: $(SourceBranch)

      - job: SetBuildNumber
        displayName: 'Set build number'
        steps:
          - checkout: none
          - bash: |
              echo "##vso[task.setvariable variable=Version.BuildNumber]$(Version.BuildNumber)"
              echo "##vso[task.setvariable variable=Version.BuildVersion]$(Version.BuildNumber)"
              echo "##vso[build.updatebuildnumber]$(Version.BuildNumber)"
              echo "##vso[build.addbuildtag]$(Version.BuildNumber)"
            displayName: 'Set release build number'
            condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))

          - bash: |
              if [[ "$(Build.Reason)" == "PullRequest" ]]; then
                echo "##vso[build.addbuildtag]PR$(System.PullRequest.PullRequestId)"
              fi
              echo "##vso[build.addbuildtag]Web"
            displayName: 'Set build tags'

      - job: PackageValidate
        displayName: "Validate open source packages"
        steps:
          - template: ..\common\validate-packages.yaml
            parameters:
              WorkingDir: '$(System.DefaultWorkingDirectory)/web'

      - job: FmtValidateTf
        displayName: "Lint and validate terraform"
        steps:
          - template: ..\common\fmt-validate-terraform.yaml
            parameters:
              TerraformDirectory: $(TerraformDirectory)

      - job: RunCheckOv
        displayName: "Static analysis terraform"
        steps:
          - template: ..\common\scan-terraform.yaml
            parameters:
              TerraformDirectory: $(TerraformDirectory)

      - job: MarkdownLint
        displayName: 'Markdown lint'
        steps:
          - template: ..\common\markdown-lint.yaml
            parameters:
              DocumentsDirectory: '$(System.DefaultWorkingDirectory)/web'

      - job: ZipStaticArtifacts
        displayName: 'Zip static artifacts'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        steps:
          - template: ..\common\publish-terraform-artifacts.yaml
            parameters:
              TerraformFolder: $(TerraformFolder)
              Module: 'web'

      - job: RunFormat
        displayName: 'Format solution'
        steps:
          - template: ..\common\dotnet-format.yaml
            parameters:
              SolutionDirectory: '$(System.DefaultWorkingDirectory)/web'

      - job: RunTests
        displayName: 'Run unit tests'
        steps:
          - template: steps\run-unit-tests.yaml

      - job: BuildE2eA11yTests
        displayName: 'Build web e2e & a11y tests'
        steps:
          - template: steps\build-tests.yaml

      - job: BuildWeb
        dependsOn: [ BranchValidate, SetBuildNumber ]
        displayName: 'Build web'
        steps:
          - template: steps\build.yaml
            parameters:
              BuildVersion: $(Version.BuildVersion)
              BuildNumber: $(Version.BuildNumber)

  - stage: DeployDevelopment
    dependsOn: [ Build ]
    displayName: 'Development'
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    variables:
      - group: 'dsi pre-prod'
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d01'
          environment: 'development'
          cipEnvironment: 'Dev'

  - stage: DeployAutomatedTest
    dependsOn: [ Build ]
    displayName: 'Automated test'
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    variables:
      - group: 'dsi pre-prod'
      - group: 'automated test app settings'
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d02'
          environment: 'automated-test'
          cipEnvironment: 'Dev'

      - job: RunE2ETests
        dependsOn: [ WebDeployment, "SyncKeyVaultReferences_web" ]
        displayName: 'Run automated e2e tests'
        steps:
          - template: steps\run-e2e-tests.yaml
            parameters:
              workspaceDir: '$(Pipeline.Workspace)'

      - job: RunA11YTests
        dependsOn: [ WebDeployment, "SyncKeyVaultReferences_web" ]
        displayName: 'Run automated a11y tests'
        steps:
          - template: steps\run-a11y-tests.yaml
            parameters:
              workspaceDir: '$(Pipeline.Workspace)'
              subscription: 's198d.azdo-deployment'
              environmentPrefix: 's198d02'

  - stage: DeployTest
    dependsOn: [ DeployAutomatedTest ]
    displayName: 'Test'
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    variables:
      - group: 'dsi pre-prod'
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198t.azdo-deployment'
          environmentPrefix: 's198t01'
          environment: 'test'
          cipEnvironment: 'Test'