parameters:
  subscription: ''
  environmentPrefix: ''
  environment: 'feature'
  cipEnvironment: ''
  disablePurgeProtection: ''
  dependsOn: []
  workspaceDir: '$(Pipeline.Workspace)'

jobs:
  - deployment: CoreDeployment
    displayName: 'Core deployment to ${{ parameters.environment }}'
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      vmImage: ubuntu-latest
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none

            - download: current
              displayName: 'Download core db artifacts'
              artifact: core-db

            - download: current
              displayName: 'Download core terraform artifacts'
              artifact: core-terraform

            - template: ..\common\run-terraform.yaml
              parameters:
                subscription: ${{ parameters.subscription }}
                environmentPrefix: ${{ parameters.environmentPrefix }}
                environment: ${{ parameters.environment }}
                cipEnvironment: ${{ parameters.cipEnvironment }}
                disablePurgeProtection: ${{ parameters.disablePurgeProtection }}
                module: 'core'

            - task: AzureKeyVault@2
              displayName: 'Import key vault vars'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                KeyVaultName: '${{ parameters.environmentPrefix }}-ebis-keyvault'
                SecretsFilter: '*'
                RunAsPreJob: false

            - task: ExtractFiles@1
              displayName: 'Extract core database'
              inputs:
                archiveFilePatterns: '${{ parameters.workspaceDir }}/core-db/Core.Database.zip'
                destinationFolder: '${{ parameters.workspaceDir }}/db'

#            - task: AzureCLI@2
#              inputs:
#                azureSubscription: ${{ parameters.subscription }}
#                scriptType: 'bash'
#                scriptLocation: 'inlineScript'
#                inlineScript: az login

            - task: AzureCLI@1
              displayName: 'Run core database migrations'

              inputs:
                azureSubscription: ${{ parameters.subscription }}
                scriptLocation: inlineScript
                inlineScript: ./Core.Database -c '$(core-sql-connection-string-default)'
                workingDirectory: '${{ parameters.workspaceDir }}/db'

#            - script: ./Core.Database -c '$(core-sql-connection-string-managed-identity)'
#              workingDirectory: '${{ parameters.workspaceDir }}/db'
#              failOnStderr: true
#              displayName: 'Run core database migrations'