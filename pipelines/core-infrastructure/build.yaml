pool:
  vmImage: 'ubuntu-latest'

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - core-infrastructure

pr: none

parameters:
  - name: featureName
    displayName: 'Name of development feature to deploy (or empty for standard Dev deploy)'
    type: string
    default: ' '

variables:
  Version.Revision: $[counter(variables['Build.SourceBranchName'], 0)]
  Version.BuildNumber: 0.0.$(Version.Revision)
  Version.BuildVersion: $(Version.BuildNumber)
  Version.FeatureName: ${{ parameters.featureName }}
  TerraformFolder: 'core-infrastructure/terraform'
  TerraformDirectory: '$(System.DefaultWorkingDirectory)/$(TerraformFolder)'
  ShouldDeploy: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))]
  ShouldDeployFeature: $[and(ne('${{ parameters.featureName }}', ' '), eq(variables['Build.Reason'], 'Manual'))]

stages:
  - stage: Build
    displayName: 'Build artifacts'
    jobs:
      - job: SetBuildNumber
        displayName: 'Set build number'
        steps:
          - checkout: none
          - bash: |
              echo "##vso[task.setvariable variable=Version.BuildNumber]$(Version.BuildNumber)"
              echo "##vso[task.setvariable variable=Version.BuildVersion]$(Version.BuildNumber)"
              echo "##vso[build.updatebuildnumber]$(Version.BuildNumber)"
              echo "##vso[build.addbuildtag]$(Version.BuildNumber)"
              echo "##vso[build.addbuildtag]Core infrastructure"
              if [[ "$(ShouldDeployFeature)" == "True" ]]; then
                echo "##vso[build.addbuildtag]Feature ($(Version.FeatureName))"
              fi
            displayName: 'Set release build number'

      - job: FmtValidateTf
        displayName: "Lint and validate terraform"
        steps:
          - template: ..\common\fmt-validate-terraform.yaml
            parameters:
              TerraformDirectory: $(TerraformDirectory)

      - job: RunCheckOv
        displayName: "Static analysis terraform"
        steps:
          - template: ..\common\scan-terraform.yaml
            parameters:
              TerraformDirectory: $(TerraformDirectory)

      - job: ZipStaticArtifacts
        displayName: 'Zip static artifacts'
        steps:
          - template: ..\common\publish-terraform-artifacts.yaml
            parameters:
              TerraformFolder: $(TerraformFolder)
              Module: 'core'

  - stage: DeployDevelopment
    dependsOn: [ Build ]
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    displayName: 'Development'
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d01'
          environment: 'development'
          cipEnvironment: 'Dev'

  - stage: DeployAutomatedTest
    dependsOn: [ Build ]
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    displayName: 'Automated test'
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d02'
          environment: 'automated-test'
          cipEnvironment: 'Dev'

  - stage: DeployTest
    dependsOn: [ DeployAutomatedTest ]
    condition: and(succeeded(), eq(variables['ShouldDeploy'],'true'))
    displayName: 'Test'
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198t.azdo-deployment'
          environmentPrefix: 's198t01'
          environment: 'test'
          cipEnvironment: 'Test'

  - stage: DeployFeature
    dependsOn: [ Build ]
    condition: and(succeeded(), eq(variables['ShouldDeployFeature'],'true'))
    displayName: 'Feature'
    jobs:
      - template: deployment.yaml
        parameters:
          subscription: 's198d.azdo-deployment'
          environmentPrefix: 's198d01-$(Version.FeatureName)'
          environment: 'feature'
          cipEnvironment: 'Dev'