@using EducationBenchmarking.Web.Extensions
@model EducationBenchmarking.Web.ViewModels.SchoolPlanCreateViewModel

@if (Model.Plan?.PupilsNursery is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsNursery)" value="@Model.Plan.PupilsNursery"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersNursery)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersNursery)">
            Teacher period allocation figures from nursery
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersNursery)))
        {
            <p id="@nameof(Model.Plan.TeachersNursery)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersNursery)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersNursery)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersNursery)"
               name="@nameof(Model.Plan.TeachersNursery)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersNursery">
    </div>
}

@if (Model.Plan?.PupilsMixedReceptionYear1.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsMixedReceptionYear1)" value="@Model.Plan.PupilsMixedReceptionYear1"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedReceptionYear1)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersMixedReceptionYear1)">
            Teacher period allocation figures from reception and year 1
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedReceptionYear1)))
        {
            <p id="@nameof(Model.Plan.TeachersMixedReceptionYear1)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersMixedReceptionYear1)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedReceptionYear1)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersMixedReceptionYear1)"
               name="@nameof(Model.Plan.TeachersMixedReceptionYear1)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersMixedReceptionYear1">
    </div>
}

@if (Model.Plan?.PupilsMixedYear1Year2.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsMixedYear1Year2)" value="@Model.Plan.PupilsMixedYear1Year2"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear1Year2)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersMixedYear1Year2)">
            Teacher period allocation figures from year 1 amd year 2
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear1Year2)))
        {
            <p id="@nameof(Model.Plan.TeachersMixedYear1Year2)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersMixedYear1Year2)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear1Year2)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersMixedYear1Year2)"
               name="@nameof(Model.Plan.TeachersMixedYear1Year2)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersMixedYear1Year2">
    </div>
}

@if (Model.Plan?.PupilsMixedYear2Year3.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsMixedYear2Year3)" value="@Model.Plan.PupilsMixedYear2Year3"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear2Year3)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersMixedYear2Year3)">
            Teacher period allocation figures from year 2 and year 3
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear2Year3)))
        {
            <p id="@nameof(Model.Plan.TeachersMixedYear2Year3)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersMixedYear2Year3)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear2Year3)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersMixedYear2Year3)"
               name="@nameof(Model.Plan.TeachersMixedYear2Year3)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersMixedYear2Year3">
    </div>
}

@if (Model.Plan?.PupilsMixedYear3Year4.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsMixedYear3Year4)" value="@Model.Plan.PupilsMixedYear3Year4"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear3Year4)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersMixedYear3Year4)">
            Teacher period allocation figures from year 3 and year 4
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear3Year4)))
        {
            <p id="@nameof(Model.Plan.TeachersMixedYear3Year4)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersMixedYear3Year4)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear3Year4)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersMixedYear3Year4)"
               name="@nameof(Model.Plan.TeachersMixedYear3Year4)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersMixedYear3Year4">
    </div>
}

@if (Model.Plan?.PupilsMixedYear4Year5.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsMixedYear4Year5)" value="@Model.Plan.PupilsMixedYear4Year5"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear4Year5)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersMixedYear4Year5)">
            Teacher period allocation figures from year 4 and year 5
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear4Year5)))
        {
            <p id="@nameof(Model.Plan.TeachersMixedYear4Year5)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersMixedYear4Year5)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear4Year5)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersMixedYear4Year5)"
               name="@nameof(Model.Plan.TeachersMixedYear4Year5)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersMixedYear4Year5">
    </div>
}

@if (Model.Plan?.PupilsMixedYear5Year6.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsMixedYear5Year6)" value="@Model.Plan.PupilsMixedYear5Year6"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear5Year6)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersMixedYear5Year6)">
            Teacher period allocation figures from year 5 and year 6
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear5Year6)))
        {
            <p id="@nameof(Model.Plan.TeachersMixedYear5Year6)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersMixedYear5Year6)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersMixedYear5Year6)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersMixedYear5Year6)"
               name="@nameof(Model.Plan.TeachersMixedYear5Year6)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersMixedYear5Year6">
    </div>
}

@if (Model.Plan?.PupilsReception.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsReception)" value="@Model.Plan.PupilsReception"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersReception)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersReception)">
            Teacher period allocation figures from reception
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersReception)))
        {
            <p id="@nameof(Model.Plan.TeachersReception)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersReception)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersReception)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersReception)"
               name="@nameof(Model.Plan.TeachersReception)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersReception">
    </div>
}

@if (Model.Plan?.PupilsYear1.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsYear1)" value="@Model.Plan.PupilsYear1"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear1)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersYear1)">
            Teacher period allocation figures from year 1
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear1)))
        {
            <p id="@nameof(Model.Plan.TeachersYear1)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersYear1)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear1)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersYear1)"
               name="@nameof(Model.Plan.TeachersYear1)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersYear1">
    </div>
}

@if (Model.Plan?.PupilsYear2.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsYear2)" value="@Model.Plan.PupilsYear2"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear2)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersYear2)">
            Teacher period allocation figures from year 2
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear2)))
        {
            <p id="@nameof(Model.Plan.TeachersYear2)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersYear2)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear2)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersYear2)"
               name="@nameof(Model.Plan.TeachersYear2)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersYear2">
    </div>
}

@if (Model.Plan?.PupilsYear3.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsYear3)" value="@Model.Plan.PupilsYear3"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear3)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersYear3)">
            Teacher period allocation figures from year 3
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear3)))
        {
            <p id="@nameof(Model.Plan.TeachersYear3)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersYear3)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear3)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersYear3)"
               name="@nameof(Model.Plan.TeachersYear3)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersYear3">
    </div>
}

@if (Model.Plan?.PupilsYear4.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsYear4)" value="@Model.Plan.PupilsYear4"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear4)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersYear4)">
            Teacher period allocation figures from year 4
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear4)))
        {
            <p id="@nameof(Model.Plan.TeachersYear4)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersYear4)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear4)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersYear4)"
               name="@nameof(Model.Plan.TeachersYear4)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersYear4">
    </div>
}

@if (Model.Plan?.PupilsYear5.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsYear5)" value="@Model.Plan.PupilsYear5"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear5)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersYear5)">
            Teacher period allocation figures from year 5
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear5)))
        {
            <p id="@nameof(Model.Plan.TeachersYear5)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersYear5)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear5)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersYear5)"
               name="@nameof(Model.Plan.TeachersYear5)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersYear5">
    </div>
}

@if (Model.Plan?.PupilsYear6.ToInt() is > 0)
{
    <input type="hidden" name="@nameof(Model.Plan.PupilsYear6)" value="@Model.Plan.PupilsYear6"/>
    
    <div class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear6)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
        <label class="govuk-label govuk-label--m" for="@nameof(Model.Plan.TeachersYear6)">
            Teacher period allocation figures from year 6
        </label>
        @if (ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear6)))
        {
            <p id="@nameof(Model.Plan.TeachersYear6)-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.Plan.TeachersYear6)]?.Errors.First().ErrorMessage
            </p>
        }
        <input class="@(ViewData.ModelState.HasError(nameof(Model.Plan.TeachersYear6)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
               id="@nameof(Model.Plan.TeachersYear6)"
               name="@nameof(Model.Plan.TeachersYear6)"
               type="number"
               spellcheck="false"
               value="@Model.Plan.TeachersYear6">
    </div>
}