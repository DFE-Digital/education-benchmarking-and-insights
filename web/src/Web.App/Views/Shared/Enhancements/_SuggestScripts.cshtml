@model Web.App.ViewModels.Enhancements.SuggestScriptsViewModel

<script src="/js/accessible-autocomplete.min.js"></script>
<script add-nonce="true">
    const handleSuggest = async (query, exclude) => {
        const params = new URLSearchParams({
            type: "school",
            search: query,
        });
        if (exclude) {
            exclude.forEach((e) => {
                params.append("exclude", e);
            });
        }

        const res = await fetch("/api/suggest?" + params, {
            redirect: "manual",
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        });

        const response = await res.json();
        if (!response.error) {
            return response;
        }

        return [];
    };

    const templates = {
        inputValue: itemFormatter,
        suggestion: (item) => item?.text ? item.text.replace(/\*([^\\*]+)\*/g, "<b>$1</b>") : "",
    }

    function itemFormatter(item) {
        return item?.text ? item.text.replace(/\*([^\\*]+)\*/g, "$1") : "";
    }

    function valueFormatter(item) {
        return item?.document?.urn ? item.document.urn : "";
    }

    function onConfirm(item) {
        const targetElement = document.getElementById("@Model.SelectedEstablishmentField");
        if (targetElement) {
            targetElement.value = valueFormatter(item);
        }
        if (inputElement) {
            inputElement.value = itemFormatter(item);
        }
    }

    async function source(query, populateResults) {
        const results = await handleSuggest(query, []);
        populateResults(results);
    }

    const inputElement = document.getElementById("@Model.InputElementId");
    if (inputElement) {
        const element = document.createElement("div");
        const id = "__@(Model.InputElementId)";
        inputElement.parentNode.insertBefore(element, inputElement);

        const selectedElement = document.createElement("input");
        selectedElement.id = "@Model.SelectedEstablishmentField";
        selectedElement.name = "@Model.SelectedEstablishmentField";
        inputElement.parentNode.insertBefore(selectedElement, inputElement);

        accessibleAutocomplete({
            element,
            id,
            name: id,
            defaultValue: inputElement.value ?? "",
            autoselect: false,
            displayMenu: "overlay",
            minLength: 3,
            showAllValues: false,
            showNoOptionsFound: false,
            confirmOnBlur: false,
            source,
            templates,
            onConfirm,
            inputClasses: "govuk-input-autocomplete"
        });

        inputElement.type = "hidden";
        selectedElement.type = "hidden";
        element.addEventListener("keydown", e => {
            // enter
            if (e.keyCode === 13) {
                inputElement.value = e.target.value?.toString() === "0" ? e.target.innerText : e.target.value;
                element.closest("form").submit();
            }
        });
    }
</script>
