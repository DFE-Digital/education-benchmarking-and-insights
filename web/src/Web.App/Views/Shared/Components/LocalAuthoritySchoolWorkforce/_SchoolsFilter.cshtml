@using Web.App.Domain
@using Web.App.ViewModels.Components
@model Web.App.ViewModels.Components.LocalAuthoritySchoolWorkforceViewModel
@{
    const string accordionId = "accordion-workforce-filters";
    List<string> resetFields = [];
    if (Model.Sort != null)
    {
        resetFields.Add($"{Model.FormPrefix}{LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.Sort}");
    }

    if (Model.AllRows)
    {
        resetFields.Add($"{Model.FormPrefix}{LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.Rows}");
    }
}

<div class="app-filter">
    <div class="app-filter__header">
        <h2 class="govuk-heading-m govuk-!-margin-0">
            Filters
        </h2>
    </div>

    @await Html.PartialAsync("Components/LocalAuthoritySchoolWorkforce/_SchoolsFilterSelected", Model)
    <div class="app-filter__body">
        <div class="govuk-accordion" data-module="govuk-accordion" id="@accordionId">
            @await Html.PartialAsync("Components/LocalAuthoritySchoolWorkforce/_SchoolsFilterAccordionSection", new LocalAuthoritySchoolFilterAccordionSectionViewModel<OverallPhaseTypes.OverallPhaseTypeFilter>(
                accordionId,
                1,
                Model.FormPrefix,
                "Phase",
                LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.SelectedOverallPhases,
                OverallPhaseTypes.AllFilters,
                Model.SelectedOverallPhases,
                f => f.GetFilterDescription(),
                f => ((int)f).ToString()))

            @await Html.PartialAsync("Components/LocalAuthoritySchoolWorkforce/_SchoolsFilterAccordionSection", new LocalAuthoritySchoolFilterAccordionSectionViewModel<NurseryProvisions.NurseryProvisionFilter>(
                accordionId,
                2,
                Model.FormPrefix,
                "Nursery provision",
                LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.SelectedNurseryProvisions,
                NurseryProvisions.AllFilters,
                Model.SelectedNurseryProvisions,
                f => f.GetFilterDescription(),
                f => ((int)f).ToString()))

            @await Html.PartialAsync("Components/LocalAuthoritySchoolWorkforce/_SchoolsFilterAccordionSection", new LocalAuthoritySchoolFilterAccordionSectionViewModel<SpecialProvisions.SpecialProvisionFilter>(
                accordionId,
                3,
                Model.FormPrefix,
                "Special class provision",
                LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.SelectedSpecialProvisions,
                SpecialProvisions.AllFilters,
                Model.SelectedSpecialProvisions,
                f => f.GetFilterDescription(),
                f => ((int)f).ToString()))

            @await Html.PartialAsync("Components/LocalAuthoritySchoolWorkforce/_SchoolsFilterAccordionSection", new LocalAuthoritySchoolFilterAccordionSectionViewModel<SixthFormProvisions.SixthFormProvisionFilter>(
                accordionId,
                4,
                Model.FormPrefix,
                "Sixth form provision",
                LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.SelectedSixthFormProvisions,
                SixthFormProvisions.AllFilters,
                Model.SelectedSixthFormProvisions,
                f => f.GetFilterDescription(),
                f => ((int)f).ToString()))
        </div>

        <div class="govuk-form-group">
            <fieldset class="govuk-fieldset">
                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                    <h2 class="govuk-fieldset__heading">
                        Show result as
                    </h2>
                </legend>
                <div class="govuk-radios govuk-radios--small" data-module="govuk-radios"
                     id="@nameof(LocalAuthoritySchoolWorkforceViewModel.ResultAs)">
                    @foreach (var dimension in LocalAuthoritySchoolWorkforceFormViewModel.FilterDimensions)
                    {
                        var name = $"{Model.FormPrefix}{LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.ResultAs}";
                        <div class="govuk-radios__item">
                            <input class="govuk-radios__input"
                                   id="@(name)-@dimension"
                                   name="@name"
                                   type="radio"
                                   value="@((int)dimension)"
                                   @(Model.ResultAs == dimension ? "checked" : "")>
                            <label class="govuk-label govuk-radios__label"
                                   for="@(name)-@dimension">
                                @dimension.GetDescription()
                            </label>
                        </div>
                    }
                </div>
            </fieldset>
        </div>

        <hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible">
        <button type="submit" class="govuk-button govuk-!-margin-bottom-3" data-module="govuk-button"
                data-testid="apply-workforce-filters"
                name="@LocalAuthoritySchoolWorkforceFormViewModel.FormFieldNames.ResetFields"
                value="@(string.Join(',', resetFields))">
            Apply filters
        </button>

        <div class="govuk-button-group govuk-!-margin-bottom-0">
            <a href="@Url.Action("DownloadSchoolsWorkforce", "LocalAuthority", new
                     {
                         code = Model.Code
                     })" role="button"
               class="govuk-button govuk-button--secondary" data-module="govuk-button">
                Save table data
            </a>
        </div>
    </div>
</div>