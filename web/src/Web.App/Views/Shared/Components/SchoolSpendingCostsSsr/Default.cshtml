@using Newtonsoft.Json
@using Web.App.Domain
@using Web.App.Extensions
@using Web.App.ViewModels
@model Web.App.ViewModels.Components.SchoolSpendingCostsViewModel

@if (Model.Costs.Any())
{
    @for (var i = 0; i < Model.Costs.Count; i++)
    {
        var cost = Model.Costs.ElementAtOrDefault(i);
        var category = cost?.Category;

        var categoryHeading = category?.Rating.Category == Category.NonEducationalSupportStaff
            ? "Non-educational support staff"
            : category?.Rating.Category;

        var categoryUri = Model.IsCustomData
            ? Url.Action("CustomData", "SchoolComparison", new
            {
                urn = Model.Urn
            })
            : Url.Action("Index", "SchoolComparison", new
            {
                urn = Model.Urn
            });

        var costCodes = category?.SubCategories
            .Select(c => Model.CostCodes.GetCostCode(c))
            .Where(x => !string.IsNullOrWhiteSpace(x))
            .ToList() ?? [];

        var uuid = Guid.NewGuid();

        <section id="spending-priorities-@category?.Rating.CostCategoryAnchorId">
            <div class="govuk-grid-row govuk-!-margin-bottom-2"
                 @(i == 0 ? $"id={Model.Id}" : "")>
                <div class="govuk-grid-column-two-thirds">
                    <h3 class="govuk-heading-s govuk-!-font-size-27">@categoryHeading</h3>
                </div>
                @if (!Model.IsCustomData)
                {
                    <div class="govuk-grid-column-one-third">
                        @await Component.InvokeAsync("ChartActionsSsr", new
                        {
                            elementId = uuid.ToString(),
                            title = categoryHeading,
                            costCodes
                        })
                    </div>
                }

                @if (costCodes.Any())
                {
                    <div class="govuk-grid-column-full">
                        <ul class="app-cost-code-list">
                            @foreach (var costCode in costCodes)
                            {
                                <li><strong class="govuk-tag">@costCode</strong></li>
                            }
                        </ul>
                    </div>
                }
                <div class="govuk-grid-column-full">
                    <p
                        class="priority @category?.Rating.PriorityTag?.Class govuk-body govuk-!-margin-bottom-0"
                        data-testid="@categoryHeading-rag-commentary">
                        @await Component.InvokeAsync("Tag", new
                        {
                            rating = new RatingViewModel(category?.Rating.PriorityTag?.Colour, category?.Rating.PriorityTag?.DisplayText)
                        })
                        @await Html.PartialAsync("_RagRatingCommentary", new RagRatingCommentaryViewModel
                        {
                            Rating = category?.Rating
                        })
                    </p>
                </div>
            </div>

            <div class="govuk-grid-row govuk-!-margin-bottom-4">
                <div class="govuk-grid-column-two-thirds">
                    <div id="@uuid" class="costs-chart-wrapper" data-title="@categoryHeading"
                         data-cost-codes="@costCodes.ToJson(Formatting.None)">
                        @if (string.IsNullOrWhiteSpace(cost?.ChartSvg))
                        {
                            <div
                                class="govuk-warning-text govuk-!-margin-top-2 govuk-!-margin-bottom-2 ssr-chart-warning">
                                <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                                <strong class="govuk-warning-text__text">
                                    <span class="govuk-visually-hidden">Warning</span>
                                    Unable to display chart
                                </strong>
                            </div>
                        }
                        else
                        {
                            @if (cost.HasNegativeOrZeroValues)
                            {
                                <div class="govuk-warning-text">
                                    <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                                    <strong class="govuk-warning-text__text">
                                        <span class="govuk-visually-hidden">Warning</span>
                                        Only displaying schools with positive expenditure.
                                    </strong>
                                </div>
                            }

                            <div class="govuk-!-margin-bottom-2 ssr-chart">
                                @Html.Raw(cost.ChartSvg)
                            </div>
                        }
                    </div>

                    @{
                        var subCategories = category?.SubCategories ?? [];
                    }
                    <p class="govuk-body category-commentary">
                        <a href="@categoryUri#@category?.Rating.CostCategoryAnchorId"
                           class="govuk-link govuk-link--no-visited-state">View
                            all @category?.Rating.Category?.ToLower(true) costs</a>@(subCategories.Any() ? ". " : string.Empty)
                        @if (subCategories.Any())
                        {
                            @:This includes
                            for (var j = 0; j < subCategories.Length; j++)
                            {
                                var subCategory = subCategories.ElementAt(j).ToLower(true);
                                if (j < subCategories.Length - 2)
                                {
                                    subCategory = $"{subCategory}, ";
                                }
                                else if (j == subCategories.Length - 1)
                                {
                                    subCategory = $"{(subCategories.Length > 1 ? "and " : string.Empty)} {subCategory}.";
                                }
                                <span>@subCategory</span>
                            }
                        }
                    </p>
                </div>
                <div class="govuk-grid-column-one-third">
                    @if (category?.CanShowCommercialResources == true)
                    {
                        <div
                            class="app-resources @(cost?.HasNegativeOrZeroValues == true ? "app-resources-warning-spacing" : "")">
                            <h4 class="govuk-heading-s">
                                Find ways to spend less
                            </h4>
                            @*@await Html.PartialAsync(category.Rating.ResourcePartial, new ResourceViewModel(false))*@
                        </div>
                    }
                </div>
            </div>
        </section>
    }
}