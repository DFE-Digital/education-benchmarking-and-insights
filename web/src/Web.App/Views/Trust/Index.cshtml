@using Web.App.Extensions
@using Web.App.ViewModels
@using Web.App.ViewModels.Components
@model Web.App.ViewModels.TrustViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.TrustHome;
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l govuk-!-margin-bottom-1">@Model.Name</h1>
        <p class="govuk-body">
            <a href="@Url.Action("Index", "FindOrganisation", new { method = OrganisationTypes.Trust })" class="govuk-link govuk-link--no-visited-state">Change trust</a>
        </p>
    </div>

    @if (Model.ComparatorGenerated.HasValue)
    {
        <div class="govuk-grid-column-full">
            @{
                var success = Model.ComparatorGenerated == true;
            }
            <div class="govuk-notification-banner govuk-notification-banner--@(success ? "success" : "failure")" role="alert" aria-labelledby="govuk-notification-banner-title" data-module="govuk-notification-banner">
                <div class="govuk-notification-banner__header">
                    <h2 class="govuk-notification-banner__title" id="govuk-notification-banner-title">
                        @(success ? "Success" : "Error")
                    </h2>
                </div>
                <div class="govuk-notification-banner__content">
                    <h3 class="govuk-notification-banner__heading">@(success ? "You are now benchmarking against your own set of trusts" : "Unable to benchmark against your own set of trusts")</h3>
                    @if (!success)
                    {
                        <p class="govuk-body">
                            Please try again later.
                        </p>
                    }
                    <p>
                        <a class="govuk-notification-banner__link"
                           href="@Url.Action("UserDefined", "TrustComparators", new { companyNumber = Model.CompanyNumber })">
                            View and change your set of trusts
                        </a>
                    </p>
                    <p>
                        <a class="govuk-notification-banner__link"
                           href="@Url.Action("Revert", "TrustComparators", new { companyNumber = Model.CompanyNumber })">
                            Change back to the sets of trusts we chose
                        </a>
                    </p>
                </div>
            </div>
        </div>
    }
</div>

@await Component.InvokeAsync("DataSource", new
{
    kind = OrganisationTypes.Trust,
    isPartOfTrust = true,
    className = "govuk-grid-column-full"
})

<div class="govuk-grid-row govuk-!-margin-bottom-5">
    <div class="govuk-grid-column-full">
        <ul class="app-headline app-headline-3 govuk-!-text-align-centre">
            <li class="app-headline-figures">
                <p class="govuk-body govuk-!-font-weight-bold">In year balance</p>
                <p class="govuk-body">@Model.InYearBalance.ToCurrency(0)</p>
            </li>
            <li class="app-headline-figures">
                <p class="govuk-body govuk-!-font-weight-bold">Revenue reserve</p>
                <p class="govuk-body">@Model.RevenueReserve.ToCurrency(0)</p>
            </li>
            <li class="app-headline-figures">
                <p class="govuk-body govuk-!-font-weight-bold">Number of academies</p>
                <p class="govuk-body">@Model.NumberSchools</p>
            </li>
        </ul>
    </div>
</div>

<h2 class="govuk-heading-m">Spending priorities for this trust</h2>
<div class="govuk-grid-row govuk-!-margin-bottom-5">
    <div class="govuk-grid-column-full">
        <ul class="app-headline app-headline-3 govuk-!-text-align-centre">
            <li class="app-headline-high">
                <p class="govuk-body govuk-!-font-size-48 govuk-!-margin-bottom-1">@Model.High</p>
                <p class="govuk-body govuk-!-margin-bottom-1">High priority costs</p>
            </li>
            <li class="app-headline-medium">
                <p class="govuk-body govuk-!-font-size-48 govuk-!-margin-bottom-1">@Model.Medium</p>
                <p class="govuk-body govuk-!-margin-bottom-1">Medium priority costs</p>
            </li>
            <li class="app-headline-low">
                <p class="govuk-body govuk-!-font-size-48 govuk-!-margin-bottom-1">@Model.Low</p>
                <p class="govuk-body govuk-!-margin-bottom-1">Low priority costs</p>
            </li>
        </ul>
    </div>
</div>

<table class="govuk-table table-cost-category-rag">
    <caption class="govuk-table__caption govuk-table__caption--m">Cost categories</caption>
    <thead class="govuk-table__head govuk-visually-hidden">
    <tr class="govuk-table__row">
        <th scope="col" class="govuk-table__header govuk-!-width-one-quarter">Category</th>
        <th scope="col" class="govuk-table__header">Sum of High/Medium/Low priority school cost categories</th>
    </tr>
    </thead>
    <tbody class="govuk-table__body">
    @foreach (var rating in Model.Ratings)
    {
        <tr class="govuk-table__row">
            <td class="govuk-table__cell govuk-!-width-one-third">
                <a href="@Url.Action("Index", "TrustSpending", new { companyNumber = Model.CompanyNumber, category = rating.Category?.ToSlug() })" class="govuk-link govuk-link--no-visited-state">@rating.Category</a>
            </td>
            <td class="govuk-table__cell">
                @await Component.InvokeAsync("RagStack", new
                {
                    identifier = rating.Category,
                    red = rating.Red,
                    amber = rating.Amber,
                    green = rating.Green,
                    redHref = $"{Url.Action("Index", "TrustSpending", new { companyNumber = Model.CompanyNumber, category = rating.Category?.ToSlug(), priority = "high" })}",
                    amberHref = $"{Url.Action("Index", "TrustSpending", new { companyNumber = Model.CompanyNumber, category = rating.Category?.ToSlug(), priority = "medium" })}",
                    greenHref = $"{Url.Action("Index", "TrustSpending", new { companyNumber = Model.CompanyNumber, category = rating.Category?.ToSlug(), priority = "low" })}"
                })
            </td>
        </tr>
    }
    </tbody>
</table>

<h2 class="govuk-heading-m">Schools in this trust</h2>

@await Html.PartialAsync("_SchoolsSection", new TrustSchoolsSectionViewModel
{
    Heading = "Nursery schools",
    Schools = Model.NurserySchools
})

@await Html.PartialAsync("_SchoolsSection", new TrustSchoolsSectionViewModel
{
    Heading = "Primary schools",
    Schools = Model.PrimarySchools
})

@await Html.PartialAsync("_SchoolsSection", new TrustSchoolsSectionViewModel
{
    Heading = "Secondary schools",
    Schools = Model.SecondarySchools
})

@await Html.PartialAsync("_SchoolsSection", new TrustSchoolsSectionViewModel
{
    Heading = "Specials and Pupil Referrals units (PRUs)",
    Schools = Model.SpecialOrPruSchools
})

@await Html.PartialAsync("_SchoolsSection", new TrustSchoolsSectionViewModel
{
    Heading = "All-through",
    Schools = Model.AllThroughSchools
})

<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("TrustFinanceTools", new
{
    identifier = Model.CompanyNumber,
    tools = new[]
    {
        FinanceTools.CompareYourCosts,
        FinanceTools.BenchmarkCensus,
        FinanceTools.CentralServices,
        FinanceTools.ForecastRisk,
        FinanceTools.FinancialPlanning
    }
})

<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("Resources", new
{
    identifier = Model.CompanyNumber,
    resources = new[]
    {
        Resources.TrustResources,
        Resources.TrustHistoricData,
        Resources.TrustDetails
    }
})

@* TODO: review for public beta
<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("GetHelp") *@