@using Web.App.Extensions
@model Web.App.ViewModels.SchoolPlanCreateViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.SchoolPlanningManagersPerRole;
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @using (Html.BeginForm("ManagersPerRole", "SchoolPlanningCreate", new { urn = Model.School.Urn, year = Model.PlanInput?.Year }, FormMethod.Post, true, new { novalidate = "novalidate" }))
        {
            <div class="govuk-form-group">
                <fieldset class="govuk-fieldset">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                        <span class="govuk-caption-l">@Model.School.Name</span>
                        <h1 class="govuk-fieldset__heading">
                            @ViewData[ViewDataKeys.Title]
                        </h1>
                    </legend>
                    
                    @if (Model.PlanInput?.ManagementRoleHeadteacher is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleHeadteacher)" value="@Model.PlanInput.ManagementRoleHeadteacher.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadteacher)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberHeadteacher)">
                                Total number of headteachers
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadteacher)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberHeadteacher)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberHeadteacher)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadteacher)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberHeadteacher)"
                                   name="@nameof(Model.PlanInput.NumberHeadteacher)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberHeadteacher">
                        </div>
                    }
                    
                    @if (Model.PlanInput?.ManagementRoleDeputyHeadteacher is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleDeputyHeadteacher)" value="@Model.PlanInput.ManagementRoleDeputyHeadteacher.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberDeputyHeadteacher)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberDeputyHeadteacher)">
                                Total number of deputy headteachers
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberDeputyHeadteacher)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberDeputyHeadteacher)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberDeputyHeadteacher)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberDeputyHeadteacher)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberDeputyHeadteacher)"
                                   name="@nameof(Model.PlanInput.NumberDeputyHeadteacher)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberDeputyHeadteacher">
                        </div>
                    }
                    
                    @if (Model.PlanInput?.ManagementRoleNumeracyLead is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleNumeracyLead)" value="@Model.PlanInput.ManagementRoleNumeracyLead.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberNumeracyLead)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberNumeracyLead)">
                                Total number of numeracy leads
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberNumeracyLead)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberNumeracyLead)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberNumeracyLead)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberNumeracyLead)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberNumeracyLead)"
                                   name="@nameof(Model.PlanInput.NumberNumeracyLead)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberNumeracyLead">
                        </div>
                    }
                    
                    @if (Model.PlanInput?.ManagementRoleLiteracyLead is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleLiteracyLead)" value="@Model.PlanInput.ManagementRoleLiteracyLead.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberLiteracyLead)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberLiteracyLead)">
                                Total number of literacy leads
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberLiteracyLead)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberLiteracyLead)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberLiteracyLead)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberLiteracyLead)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberLiteracyLead)"
                                   name="@nameof(Model.PlanInput.NumberLiteracyLead)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberLiteracyLead">
                        </div>
                    }
                    
                    @if (Model.PlanInput?.ManagementRoleHeadSmallCurriculum is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleHeadSmallCurriculum)" value="@Model.PlanInput.ManagementRoleHeadSmallCurriculum.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadSmallCurriculum)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberHeadSmallCurriculum)">
                                Total number of head of small curriculum areas
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadSmallCurriculum)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberHeadSmallCurriculum)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberHeadSmallCurriculum)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadSmallCurriculum)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberHeadSmallCurriculum)"
                                   name="@nameof(Model.PlanInput.NumberHeadSmallCurriculum)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberHeadSmallCurriculum">
                        </div>
                    }

                    @if (Model.PlanInput?.ManagementRoleHeadKs1 is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleHeadKs1)" value="@Model.PlanInput.ManagementRoleHeadKs1.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadKs1)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberHeadKs1)">
                                Total number of heads of KS1
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadKs1)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberHeadKs1)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberHeadKs1)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadKs1)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberHeadKs1)"
                                   name="@nameof(Model.PlanInput.NumberHeadKs1)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberHeadKs1">
                        </div>
                    }

                    @if (Model.PlanInput?.ManagementRoleHeadKs2 is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleHeadKs2)" value="@Model.PlanInput.ManagementRoleHeadKs2.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadKs2)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberHeadKs2)">
                                Total number of heads of KS2
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadKs2)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberHeadKs2)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberHeadKs2)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadKs2)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberHeadKs2)"
                                   name="@nameof(Model.PlanInput.NumberHeadKs2)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberHeadKs2">
                        </div>
                    }


                    @if (Model.PlanInput?.ManagementRoleSenco is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleSenco)" value="@Model.PlanInput.ManagementRoleSenco.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberSenco)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberSenco)">
                                Total number of special education needs coordinators (SENCO)
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberSenco)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberSenco)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberSenco)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberSenco)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberSenco)"
                                   name="@nameof(Model.PlanInput.NumberSenco)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberSenco">
                        </div>
                    }
                    
                    @if (Model.PlanInput?.ManagementRoleAssistantHeadteacher is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleAssistantHeadteacher)" value="@Model.PlanInput.ManagementRoleAssistantHeadteacher.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberAssistantHeadteacher)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberAssistantHeadteacher)">
                                Total number of assistant headteachers
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberAssistantHeadteacher)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberAssistantHeadteacher)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberAssistantHeadteacher)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberAssistantHeadteacher)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberAssistantHeadteacher)"
                                   name="@nameof(Model.PlanInput.NumberAssistantHeadteacher)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberAssistantHeadteacher">
                        </div>
                    }

                    @if (Model.PlanInput?.ManagementRoleHeadLargeCurriculum is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleHeadLargeCurriculum)" value="@Model.PlanInput.ManagementRoleHeadLargeCurriculum.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadLargeCurriculum)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberHeadLargeCurriculum)">
                                Total number of head of large curriculum areas
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadLargeCurriculum)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberHeadLargeCurriculum)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberHeadLargeCurriculum)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberHeadLargeCurriculum)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberHeadLargeCurriculum)"
                                   name="@nameof(Model.PlanInput.NumberHeadLargeCurriculum)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberHeadLargeCurriculum">
                        </div>
                    }
                    
                    @if (Model.PlanInput?.ManagementRolePastoralLeader is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRolePastoralLeader)" value="@Model.PlanInput.ManagementRolePastoralLeader.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberPastoralLeader)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberPastoralLeader)">
                                Total number of pastoral leaders
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberPastoralLeader)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberPastoralLeader)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberPastoralLeader)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberPastoralLeader)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberPastoralLeader)"
                                   name="@nameof(Model.PlanInput.NumberPastoralLeader)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberPastoralLeader">
                        </div>
                    }
                    
                    @if (Model.PlanInput?.ManagementRoleOtherMembers is true)
                    {
                        <input type="hidden" name="@nameof(Model.PlanInput.ManagementRoleOtherMembers)" value="@Model.PlanInput.ManagementRoleOtherMembers.ToString().ToLower()"/>
                        
                        <div class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberOtherMembers)) ? "govuk-form-group govuk-form-group--error" : "govuk-form-group")">
                            <label class="govuk-label govuk-label--m" for="@nameof(Model.PlanInput.NumberOtherMembers)">
                                Total number of other members of management or leadership staff
                            </label>
                            @if (ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberOtherMembers)))
                            {
                                <p id="@nameof(Model.PlanInput.NumberOtherMembers)-error" class="govuk-error-message">
                                    <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState[nameof(Model.PlanInput.NumberOtherMembers)]?.Errors.First().ErrorMessage
                                </p>
                            }
                            <input class="@(ViewData.ModelState.HasError(nameof(Model.PlanInput.NumberOtherMembers)) ? "govuk-input govuk-input--width-5 govuk-input--error" : "govuk-input govuk-input--width-5")"
                                   id="@nameof(Model.PlanInput.NumberOtherMembers)"
                                   name="@nameof(Model.PlanInput.NumberOtherMembers)"
                                   type="number"
                                   spellcheck="false"
                                   value="@Model.PlanInput.NumberOtherMembers">
                        </div>
                    }
                </fieldset>
            </div>
            <button type="submit" class="govuk-button" data-module="govuk-button">
                Continue
            </button>
        }
    </div>
</div>