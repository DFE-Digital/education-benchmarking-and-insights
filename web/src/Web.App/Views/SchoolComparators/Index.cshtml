@using Web.App.Extensions
@model Web.App.ViewModels.SchoolComparatorsViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.SchoolComparators;
}

@await Component.InvokeAsync("EstablishmentHeading", new
{
    title = ViewData[ViewDataKeys.Title],
    name = Model.Name,
    id = Model.Urn,
    kind = OrganisationTypes.School
})

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <p class="govuk-body">These are the 2 sets of similar schools we've chosen to benchmark this school's spending against.</p>

        <feature name="@FeatureFlags.UserDefinedComparators">
            <p class="govuk-body">
                <a class="govuk-link govuk-link--no-visited-state"
                   href="@Url.Action("Index", "SchoolComparatorsCreate", new { urn = Model.Urn })">
                    Choose your own set of schools
                </a>
            </p>
        </feature>
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
        <div class="govuk-tabs" data-module="govuk-tabs">
            <ul class="govuk-tabs__list">
                <li class="govuk-tabs__list-item govuk-tabs__list-item--selected">
                    <a class="govuk-tabs__tab" href="#running">
                        Running cost categories
                    </a>
                </li>
                <li class="govuk-tabs__list-item">
                    <a class="govuk-tabs__tab" href="#building">
                        Building cost categories
                    </a>
                </li>
            </ul>
            <div class="govuk-tabs__panel" id="running">
                <h2 class="govuk-heading-l">Running cost categories</h2>
                <p class="govuk-body">We've chosen 30 similar schools to benchmark this school against running cost categories, which includes all staffing, ICT, consultancy and catering.</p>
                <h3 class="govuk-heading-m">How we chose these schools</h3>
                <p class="govuk-body">We chose these schools based on:</p>
                <ul class="govuk-list govuk-list--bullet">
                    <li>school phase or type</li>
                    <li>region</li>
                    <li>number of pupils</li>
                    <li>pupils eligible for free school meals (FSM)</li>
                    <li>pupils with special educational needs (SEN)</li>
                </ul>
                <table class="govuk-table">
                    <caption class="govuk-table__caption govuk-table__caption--m">Schools we've chosen</caption>
                    <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th scope="col" class="govuk-table__header">School</th>
                        <th scope="col" class="govuk-table__header">Type</th>
                        <th scope="col" class="govuk-table__header">Number of pupils</th>
                        <th scope="col" class="govuk-table__header">Pupils with special educational needs</th>
                        <th scope="col" class="govuk-table__header">Pupils eligible for free school meals</th>
                    </tr>
                    </thead>
                    <tbody class="govuk-table__body">

                    @foreach (var school in Model.PupilSchools.Where(x => x.URN != Model.Urn))
                    {
                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell">
                                <strong>@school.SchoolName</strong>
                                <br/>
                                <span class="govuk-hint">@school.Address</span>
                            </td>
                            <td class="govuk-table__cell">
                                @school.OverallPhase
                            </td>
                            <td class="govuk-table__cell">
                                @school.TotalPupils
                            </td>
                            <td class="govuk-table__cell">
                                @school.PercentSpecialEducationNeeds.ToPercent()
                            </td>
                            <td class="govuk-table__cell">
                                @school.PercentFreeSchoolMeals.ToPercent()
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div class="govuk-tabs__panel govuk-tabs__panel--hidden" id="building">
                <h2 class="govuk-heading-l">Building cost categories</h2>
                <p class="govuk-body">We've chosen 30 similar schools to benchmark this school against running cost categories, which includes all staffing, ICT, consultancy and catering.</p>
                <h3 class="govuk-heading-m">How we chose these schools</h3>
                <p class="govuk-body">We chose these schools based on:</p>
                <ul class="govuk-list govuk-list--bullet">
                    <li>school phase or type</li>
                    <li>region</li>
                    <li>gross internal floor area</li>
                    <li>average age of buildings</li>
                    <li>whether they are a Private Finance Initiative (PFI) school</li>
                </ul>
                <table class="govuk-table">
                    <caption class="govuk-table__caption govuk-table__caption--m">Schools we've chosen</caption>
                    <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th scope="col" class="govuk-table__header">School</th>
                        <th scope="col" class="govuk-table__header">Type</th>
                        <th scope="col" class="govuk-table__header">Number of pupils</th>
                        <th scope="col" class="govuk-table__header">Gross internal floor area</th>
                        <th scope="col" class="govuk-table__header">Average age of buildings</th>
                    </tr>
                    </thead>
                    <tbody class="govuk-table__body">

                    @foreach (var (index, school) in Model.BuildingSchools.Where(x => x.URN != Model.Urn).Select((school, index) => (index, school)))
                    {
                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell">
                                <strong>@school.SchoolName</strong>
                                <br/>
                                <span class="govuk-hint">@school.Address</span>
                            </td>
                            <td class="govuk-table__cell">
                                @school.OverallPhase
                            </td>
                            <td class="govuk-table__cell">
                                @school.TotalPupils
                            </td>
                            @if (User.Identity is { IsAuthenticated: true })
                            {
                                <td class="govuk-table__cell">
                                    @school.TotalInternalFloorArea
                                </td>
                                <td class="govuk-table__cell">
                                    @school.BuildingAverageAge.ToAge()
                                </td>
                            }
                            else if (index == 0)
                            {
                                <td class="govuk-table__cell" colspan="2" rowspan="@Model.BuildingSchools.Count()" style="text-align: center; vertical-align: top;">
                                    @Html.ActionLink("Sign in", "Signin", "Account", new { redirectUri = ViewContext.HttpContext.Request.Path }, new { @class = "govuk-link govuk-link--no-visited-state" })
                                    to see
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script type="module" add-nonce="true">
      import { initAll } from '/js/govuk-frontend.min.js'
      initAll()
    </script>
}