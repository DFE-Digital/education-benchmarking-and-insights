@using Web.App.Extensions
@using Web.App.ViewModels.Components
@model Web.App.ViewModels.SchoolViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.SchoolHome;
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l govuk-!-margin-bottom-1">@Model.Name</h1>
        <p class="govuk-body">
            <a href="@Url.Action("Index", "FindOrganisation", new { method = OrganisationTypes.School })" class="govuk-link govuk-link--no-visited-state">Change school</a>
        </p>
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @if (Model.IsPartOfTrust)
        {
            <h2 class="govuk-heading-m">
                <span>Part of </span><a href="@Url.Action("Index", "Trust", new { companyNumber = Model.TrustIdentifier })" class="govuk-link govuk-link--no-visited-state">@Model.TrustName</a>
            </h2>
        }
    </div>
    <div class="govuk-grid-column-full">
        @if (Model.ComparatorGenerated.HasValue && Model.HasMetricRag)
        {
            var success = Model.ComparatorGenerated == true;
            <div class="govuk-notification-banner govuk-notification-banner--@(success ? "success" : "failure")" role="alert" aria-labelledby="govuk-notification-banner-title" data-module="govuk-notification-banner">
                <div class="govuk-notification-banner__header">
                    <h2 class="govuk-notification-banner__title" id="govuk-notification-banner-title">
                        @(success ? "Success" : "Error")
                    </h2>
                </div>
                <div class="govuk-notification-banner__content">
                    <h3 class="govuk-notification-banner__heading">@(success ? "You are now benchmarking against your own set of schools" : "Unable to benchmark against your own set of schools")</h3>
                    @if (!success)
                    {
                        <p class="govuk-body">
                            Please try again later.
                        </p>
                    }
                    <p>
                        <a class="govuk-notification-banner__link"
                           href="@Url.Action("UserDefined", "SchoolComparators", new { urn = Model.Urn })">
                            View and change your set of schools
                        </a>
                    </p>
                    <p>
                        <a class="govuk-notification-banner__link"
                           href="@Url.Action("Revert", "SchoolComparators", new { urn = Model.Urn })"
                           id="revert-set">
                            Change back to the sets of schools we chose
                        </a>
                    </p>
                </div>
            </div>
        }

        @if (!Model.HasMetricRag && !string.IsNullOrEmpty(Model.UserDefinedSetId))
        {
            <div class="govuk-notification-banner" role="region" aria-labelledby="govuk-notification-banner-title" data-module="govuk-notification-banner">
                <div class="govuk-notification-banner__header">
                    <h2 class="govuk-notification-banner__title" id="govuk-notification-banner-title">
                        Important
                    </h2>
                </div>
                <div class="govuk-notification-banner__content">
                    <h3 class="govuk-notification-banner__heading">
                        You've chosen fewer than 10 schools so we cannot display spending priorities
                    </h3>
                    <p>
                        You're now benchmarking against your chosen schools, but to see spending priorities you need to choose 10 or more schools.
                    </p>
                    <p>
                        <a class="govuk-notification-banner__link"
                           href="@Url.Action("UserDefined", "SchoolComparators", new { urn = Model.Urn })">
                            Choose more schools
                        </a>
                    </p>
                    <p>
                        <a class="govuk-notification-banner__link"
                           href="@Url.Action("Revert", "SchoolComparators", new { urn = Model.Urn })"
                           id="revert-set">
                            Change back to the sets of schools we chose
                        </a>
                    </p>
                </div>
            </div>
        }
    </div>
</div>

@await Component.InvokeAsync("DataSource", new
{
    kind = OrganisationTypes.School,
    isPartOfTrust = Model.IsPartOfTrust,
    additionText = string.IsNullOrEmpty(Model.UserDefinedSetId)
        ? null
        : new[]
        {
            "You are now comparing with your chosen schools."
        }
})

@if (Model.HasFinancials)
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <ul class="app-headline app-headline-4 govuk-!-text-align-centre">
                <li class="app-headline-figures">
                    <p class="govuk-body govuk-!-font-weight-bold">In year balance</p>
                    <p class="govuk-body">@Model.InYearBalance.ToCurrency(0)</p>
                </li>
                <li class="app-headline-figures">
                    <p class="govuk-body govuk-!-font-weight-bold">Revenue reserve</p>
                    <p class="govuk-body">@Model.RevenueReserve.ToCurrency(0)</p>
                </li>
                <li class="app-headline-figures">
                    <p class="govuk-body govuk-!-font-weight-bold">Ofsted rating</p>
                    <p class="govuk-body">@Model.OfstedRating</p>
                </li>
                <li class="app-headline-figures">
                    <p class="govuk-body govuk-!-font-weight-bold">School phase</p>
                    <p class="govuk-body">@Model.OverallPhase</p>
                </li>
            </ul>
        </div>
    </div>
}
else
{
    <div class="govuk-warning-text">
        <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
        <strong class="govuk-warning-text__text">
            <span class="govuk-visually-hidden">Warning</span>
            Financial information for this school could not be loaded.
        </strong>
    </div>
}
@if (Model.HasMetricRag)
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <h2 class="govuk-heading-m">Spending priorities for this school</h2>
            @if (Model.Ratings.Any())
            {
                <h3 class="govuk-heading-s">Top spending priorities</h3>
                <div class="top-categories">
                    @foreach (var rating in Model.Ratings)
                    {
                        <div>
                            <h4 class="govuk-heading-s">@rating.Category</h4>
                            <p class="priority @rating.PriorityTag?.Class govuk-body">
                                @await Component.InvokeAsync("Tag", new
                                {
                                    rating.PriorityTag?.Colour,
                                    rating.PriorityTag?.DisplayText
                                })
                                Spends <strong>@rating.Value.ToCurrency(0)</strong> @rating.Unit - more than <strong>@rating.Percentile.ToPercent()</strong> of similar schools.
                            </p>
                        </div>
                    }
                </div>
            }

            <h3 class="govuk-heading-s">
                <a href="@Url.Action("Index", "SchoolSpending", new { urn = Model.Urn })" class="govuk-link govuk-link--no-visited-state">
                    View all spending priorities for this school
                </a>
            </h3>
        </div>
    </div>
}

<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("SchoolFinanceTools", new
{
    identifier = Model.Urn,
    tools = new[]
    {
        FinanceTools.CompareYourCosts,
        FinanceTools.FinancialPlanning,
        FinanceTools.BenchmarkCensus
    }
})

<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("Resources", new
{
    identifier = Model.Urn,
    resources = new[]
    {
        Resources.SchoolResources,
        Resources.SchoolHistoricData,
        Resources.SchoolDetails
    }
})

@* TODO: review for public beta
<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("GetHelp") *@

@section scripts
{
    <script type="module" add-nonce="true">
      import { initAll } from '/js/govuk-frontend.min.js'
      initAll()
    </script>
}