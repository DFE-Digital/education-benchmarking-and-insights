@using Web.App.Extensions
@using Web.App.TagHelpers
@using Web.App.ViewModels
@using Web.App.ViewModels.Components
@model Web.App.ViewModels.SchoolViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.SchoolHome;
}

@if (Model is { PeriodCoveredByReturn: < 12 })
{
    @await Html.PartialAsync("_IncompleteFinances")
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l govuk-!-margin-bottom-1">@Model.Name</h1>
        <p class="govuk-body">
            @Html.TrackedAnchor(
                TrackedLinks.ChangeOrganisation,
                Url.Action("Index", "FindOrganisation", new
                {
                    method = OrganisationTypes.School
                }) ?? "",
                "Change school")
        </p>
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        @if (Model.IsPartOfTrust)
        {
            <h2 class="govuk-heading-m">
                <span>Part of </span><a href="@Url.Action("Index", "Trust", new { companyNumber = Model.TrustIdentifier })" class="govuk-link govuk-link--no-visited-state">@Model.TrustName</a>
            </h2>
        }
    </div>
    @await Html.PartialAsync("_Banners", Model)
</div>

@if (Model.FederationSchools.Length > 0)
{
    @await Html.PartialAsync("_FederationSchools", Model)
}

@await Component.InvokeAsync("DataSource", new
{
    organisationType = OrganisationTypes.School,
    sourceType = DataSourceTypes.Spending,
    isPartOfTrust = Model.IsPartOfTrust,
    additionText = string.IsNullOrEmpty(Model.UserDefinedSetId)
        ? null
        : new[]
        {
            "You are now comparing with your chosen schools."
        }
})

<div class="govuk-grid-row govuk-!-margin-bottom-5">
    <div class="govuk-grid-column-full">
        <ul class="app-headline app-headline-4 govuk-!-text-align-centre govuk-!-margin-0">
            <li class="app-headline-figures">
                <p class="govuk-body-l govuk-!-font-weight-bold govuk-!-margin-bottom-4">In year balance</p>
                <p class="govuk-body-l govuk-!-margin-bottom-2">@Model.InYearBalance.ToCurrency(0)</p>
            </li>
            <li class="app-headline-figures">
                <p class="govuk-body-l govuk-!-font-weight-bold govuk-!-margin-bottom-4">Revenue reserve</p>
                <p class="govuk-body-l govuk-!-margin-bottom-2">@Model.RevenueReserve.ToCurrency(0)</p>
            </li>
            <li class="app-headline-figures">
                <p class="govuk-body-l govuk-!-font-weight-bold govuk-!-margin-bottom-4">Ofsted rating</p>
                <p class="govuk-body-l govuk-!-margin-bottom-2">@Model.OfstedRating</p>
            </li>
            <li class="app-headline-figures">
                <p class="govuk-body-l govuk-!-font-weight-bold govuk-!-margin-bottom-4">School phase</p>
                <p class="govuk-body-l govuk-!-margin-bottom-2">@Model.OverallPhase</p>
            </li>
        </ul>
    </div>
</div>


@if (Model.HasMetricRag)
{
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <h2 class="govuk-heading-m">Spending priorities for this school</h2>
            @if (Model.Ratings.Any())
            {
                <h3 class="govuk-heading-s">Top spending priorities</h3>
            }
        </div>
        @if (Model.Ratings.Any())
        {
            <div class="govuk-grid-column-one-half">
                <div class="top-categories school-home-priorities">
                    @foreach (var rating in Model.Ratings)
                    {
                        <div class="priority-wrapper @rating.PriorityTag?.Class">
                            <h4 class="govuk-heading-s">@rating.Category</h4>
                            <p class="priority @rating.PriorityTag?.Class govuk-body">
                                @await Component.InvokeAsync("Tag", new
                                {
                                    rating = new RatingViewModel(rating.PriorityTag?.Colour, rating.PriorityTag?.DisplayText)
                                })
                                Spends <strong>@rating.Value.ToCurrency(0)</strong> @rating.Unit â€”
                                @await Html.PartialAsync("_RagRatingCommentary", new RagRatingCommentaryViewModel
                                {
                                    Rating = rating
                                })
                            </p>
                        </div>
                    }
                </div>
            </div>
        }
        <div class="govuk-grid-column-one-half govuk-body" id="rag-guidance">
            <p>
                Red, amber and green (RAG) priority ratings are shown to give an indication of the spending compared to
                similar schools.
            </p>
            <p>
                The rating is not an indication of performance. It is used to display if spending is significantly
                more or less than similar schools. This does not consider any individual spending strategies which might
                apply.
            </p>
            <p>
                The ratings are intended for schools and trusts to identify potential areas to help them make
                informed spending decisions.
            </p>
            <p>
                <strong>
                    <a href="@Url.Action("Index", "SchoolSpending", new { urn = Model.Urn })" class="govuk-link govuk-link--no-visited-state">
                        View all spending priorities for this school
                    </a>
                </strong>
            </p>
        </div>
    </div>
}

<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("SchoolFinanceTools", new
{
    identifier = Model.Urn,
    tools = new[]
    {
        FinanceTools.CompareYourCosts,
        FinanceTools.FinancialPlanning,
        FinanceTools.BenchmarkCensus
    }
})

<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("Resources", new
{
    identifier = Model.Urn,
    resources = new[]
    {
        Resources.SchoolResources,
        Resources.SchoolHistoricData,
        Resources.SchoolDetails,
        Resources.DataSource
    }
})

@* TODO: review for public beta
<hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

@await Component.InvokeAsync("GetHelp") *@

@section scripts
{
    <script type="module" add-nonce="true">
      import { initAll } from '/js/govuk-frontend.min.js'
      initAll()
    </script>
}