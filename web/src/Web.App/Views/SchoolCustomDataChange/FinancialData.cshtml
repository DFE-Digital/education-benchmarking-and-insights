@model Web.App.ViewModels.SchoolCustomDataChangeViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.SchoolChangeData;
}

@await Component.InvokeAsync("EstablishmentHeading", new
{
    title = PageTitles.SchoolChangeDataFinancialData,
    name = Model.School.SchoolName,
    id = Model.School.URN,
    kind = OrganisationTypes.School
})

@await Html.PartialAsync("_ErrorSummary")
@using (Html.BeginForm("FinancialData", "SchoolCustomDataChange", new
        {
            urn = Model.School.URN
        }, FormMethod.Post, true, new
        {
            novalidate = "novalidate",
            id = "form-custom-data-financial"
        }))
{
    <div class="govuk-accordion" data-module="govuk-accordion" id="accordion-financial-data">
        @await Html.PartialAsync("_AccordionSection", Model.AdministrativeSuppliesSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 1
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.CateringSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 2
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.EducationalSuppliesSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 3
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.ITSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 4
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.NonEducationalSupportStaffSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 5
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.PremisesAndServicesSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 6
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.TeachingAndTeachingSupportSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 7
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.UtilitiesSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 8
            }
        })
        @await Html.PartialAsync("_AccordionSection", Model.OtherCostsSection, new ViewDataDictionary(ViewData)
        {
            {
                "Index", 9
            }
        })
    </div>
    <div id="custom-data-totals">
        <h2 class="govuk-heading-m">
            Totals
        </h2>
        @await Html.PartialAsync("_CustomDataEntryTable", Model.TotalsSection)
        <hr class="govuk-section-break govuk-section-break--xl govuk-section-break--visible"/>
    </div>
    <button type="submit" class="govuk-button" data-module="govuk-button">
        Continue
    </button>
}

@section scripts
{
    <!--suppress JSFileReferences -->
    <script type="module" add-nonce="true">
        import { initAll } from '/js/govuk-frontend.min.js';
        initAll();

        const currentTotalIncomeElement = document.getElementById("current-TotalIncome");
        const currentTotalExpenditureElement = document.getElementById("current-TotalExpenditure");
        const customTotalIncomeElement = document.getElementById("custom-TotalIncome");
        const customTotalExpenditureElement = document.getElementById("custom-TotalExpenditure");
        const customTotalIncomeInputElement = document.getElementById("TotalIncome");
        const customTotalExpenditureInputElement = document.getElementById("TotalExpenditure");
        const form = document.getElementById("form-custom-data-financial");
        const inputs = form.getElementsByTagName("input");
        const currencyFormatter = new Intl.NumberFormat("en-GB", { style: "currency", currency: "GBP" });
        
        // get the current totals to help obtain the base figures to use with custom values
        const currentTotalIncome = parseFloat(currentTotalIncomeElement.dataset.value);
        const currentTotalExpenditure = parseFloat(currentTotalExpenditureElement.dataset.value);
        let baseIncome = 0;
        let baseExpenditure = 0;
        
        const recalculateAndSetTotals = function() {
            let customIncome = 0;
            let customExpenditure = 0;

            // for every <form>'s <input> that is not `type=hidden`:
            //   1. parse the corresponding 'current' value
            //   2. attempt to parse the 'custom' value in the <input>
            //   3. add 'custom' value, if valid, otherwise 'current' value to 'custom' income/expenditure totals
            for (let input of inputs) {
                const currentValueElement = document.getElementById(`current-${input.id}`);
                if (!currentValueElement || input.type === "hidden") {
                    continue;
                }
                
                const currentValue = parseFloat(currentValueElement.dataset.value);
                const value = input.value === "" ? currentValue : parseFloat(input.value);
                if (isNaN(value)) {
                    continue;
                }

                const isIncome = input.id.includes("Income");
                if (isIncome) {
                    customIncome += value;
                } else {
                    customExpenditure += value;
                }
            }

            // then calculate the new totals based on the base values calculated earlier
            const customTotalIncome = customIncome + baseIncome;
            const customTotalExpenditure = customExpenditure + baseExpenditure;
            
            // and set appropriately in the DOM
            customTotalIncomeElement.setAttribute("data-value", customTotalIncome.toString());
            customTotalIncomeElement.innerText = currencyFormatter.format(customTotalIncome);
            customTotalIncomeInputElement.value = customTotalIncome.toString();
            customTotalExpenditureElement.setAttribute("data-value", customTotalExpenditure.toString());
            customTotalExpenditureElement.innerText = currencyFormatter.format(customTotalExpenditure);
            customTotalExpenditureInputElement.value = customTotalExpenditure.toString();
        }
        
        // for every <form>'s <input> that is not `type=hidden`:
        //   1. attach an event listener when the field is blurred
        //   2. add corresponding 'current' value to 'current' income/expenditure totals
        let currentIncome = 0;
        let currentExpenditure = 0;
        for (let input of inputs) {
            input.addEventListener("blur", recalculateAndSetTotals);
            
            const currentValueElement = document.getElementById(`current-${input.id}`);
            if (!currentValueElement || input.type === "hidden") {
                continue;
            }
            
            const value = parseFloat(currentValueElement.dataset.value);
            const isIncome = input.id.includes("Income");
            if (isIncome) {
                currentIncome += value;
            } else {
                currentExpenditure += value;
            }
        }

        // then calculate the base income/expenditure values to use when calculating the 'custom' values 
        baseIncome = currentTotalIncome - currentIncome;
        baseExpenditure = currentTotalExpenditure - currentExpenditure;
    </script>
}