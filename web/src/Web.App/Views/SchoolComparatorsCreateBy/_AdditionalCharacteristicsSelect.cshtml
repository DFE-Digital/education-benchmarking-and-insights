@using Web.App.Extensions
@model Web.App.ViewModels.AdditionalCharacteristicsSelectViewModel

<div class="govuk-checkboxes__item">
    <input class="govuk-checkboxes__input"
           id="@Model.SelectedFieldName"
           name="@Model.SelectedFieldName"
           type="checkbox"
           value="true"
           data-aria-controls="conditional-@Model.SelectedFieldName" @(Model.Selected ? "checked" : "")>
    <label class="govuk-label govuk-checkboxes__label" for="@Model.SelectedFieldName">
        @Model.Title
    </label>
</div>
<div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden" id="conditional-@Model.SelectedFieldName">
    <div class="govuk-form-group @(Model.HasError ? "govuk-form-group--error" : string.Empty)">
        <fieldset class="govuk-fieldset">
            <div class="govuk-hint">
                @if (string.IsNullOrWhiteSpace(Model.SchoolValueFormatted))
                {
                    @:No value was supplied for 
                    @:
                    @Model.SchoolName
                }
                else
                {
                    @Model.SchoolName
                    @:
                    @Model.Prefix
                    <strong>@Model.SchoolValueFormatted</strong>
                    @Model.Suffix
                }
            </div>
            @if (Model.HasError)
            {
                <p id="@Model.SelectedFieldName-error" class="govuk-error-message">
                    <span class="govuk-visually-hidden">Error:</span>
                    @for (var i = 0; i < Model.Errors.Length; i++)
                    {
                        @Model.Errors[i]
                        if (i < Model.Errors.Length - 1)
                        {
                            <br/>
                        }
                    }
                </p>
            }
            <legend class="govuk-visually-hidden">@Model.Title</legend>
            @if (Model.MultiSelect)
            {
                <div class="govuk-checkboxes" data-module="govuk-checkboxes" id="@Model.ValueFieldName">
                    @foreach (var option in Model.Options)
                    {
                        <div class="govuk-checkboxes__item">
                            <input
                                class="govuk-checkboxes__input"
                                id="@Model.ValueFieldName-@option.ToSlug()"
                                name="@Model.ValueFieldName"
                                type="checkbox"
                                value="@option"
                                @(Model.Values.Contains(option) ? "checked" : "")>
                            <label class="govuk-label govuk-checkboxes__label" for="@Model.ValueFieldName-@option.ToSlug()">
                                @option
                            </label>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="govuk-radios" data-module="govuk-radios" id="@Model.ValueFieldName">
                    @foreach (var option in Model.Options)
                    {
                        <div class="govuk-radios__item">
                            <input
                                class="govuk-radios__input"
                                id="@Model.ValueFieldName-@option.ToSlug()"
                                name="@Model.ValueFieldName"
                                type="radio"
                                value="@option"
                                @(Model.Values.Contains(option) ? "checked" : "")>
                            <label class="govuk-label govuk-radios__label" for="@Model.ValueFieldName-@option.ToSlug()">
                                @option
                            </label>
                        </div>
                    }
                </div>
            }
        </fieldset>
    </div>
</div>