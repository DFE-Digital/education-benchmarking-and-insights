@using Web.App.Extensions
@model Web.App.ViewModels.UserDefinedCharacteristicViewModel
@{
    var selected = bool.TrueString.Equals(ViewData.ModelState.GetAttemptedValueOrDefault(nameof(Model.TotalPupils), Model.TotalPupils), StringComparison.OrdinalIgnoreCase);
    var valueFrom = ViewData.ModelState.GetAttemptedValueOrDefault(nameof(Model.TotalPupilsFrom), Model.TotalPupilsFrom?.ToString());
    var valueTo = ViewData.ModelState.GetAttemptedValueOrDefault(nameof(Model.TotalPupilsTo), Model.TotalPupilsTo?.ToString());
    var hasError = ViewData.ModelState.HasError(nameof(Model.TotalPupilsFrom)) || ViewData.ModelState.HasError(nameof(Model.TotalPupilsTo));
    var errors = hasError
        ? (ViewData.ModelState[nameof(Model.TotalPupilsFrom)]?.Errors ?? [])
        .Concat(ViewData.ModelState[nameof(Model.TotalPupilsTo)]?.Errors ?? [])
        .Select(e => e.ErrorMessage)
        .ToArray()
        : [];
    var schoolName = ViewData["SchoolName"] as string;
    var totalPupils = ViewData["TotalPupils"] as decimal?;
}

<div class="govuk-checkboxes__item">
    <input class="govuk-checkboxes__input" id="@nameof(Model.TotalPupils)" name="@nameof(Model.TotalPupils)" type="checkbox" value="true" data-aria-controls="conditional-@nameof(Model.TotalPupils)" @(selected ? "checked" : "")>
    <label class="govuk-label govuk-checkboxes__label" for="@nameof(Model.TotalPupils)">
        Number of pupils
    </label>
</div>
<div class="govuk-checkboxes__conditional govuk-checkboxes__conditional--hidden" id="conditional-@nameof(Model.TotalPupils)">
    <div class="govuk-form-group @(hasError ? "govuk-form-group--error" : string.Empty)">
        <fieldset class="govuk-fieldset">
            <div class="govuk-hint">
                @schoolName has <strong>@totalPupils.GetValueOrDefault().ToNumberSeparator() pupils</strong>
            </div>
            @if (hasError)
            {
                <p id="@nameof(Model.Code)-error" class="govuk-error-message">
                    <span class="govuk-visually-hidden">Error:</span>
                    @for (var i = 0; i < errors.Length; i++)
                    {
                        @errors[i]
                        if (i < errors.Length - 1)
                        {
                            <br/>
                        }
                    }
                </p>
            }
            <legend class="govuk-visually-hidden">Number of pupils</legend>
            <div class="govuk-grid-column-one-quarter">
                <label class="govuk-label" for="@nameof(Model.TotalPupilsFrom)">
                    From
                </label>
                <input class="govuk-input govuk-input--width-5 @(ViewData.ModelState.HasError(nameof(Model.TotalPupilsFrom)) ? "govuk-input--error" : string.Empty)" id="@nameof(Model.TotalPupilsFrom)" name="@nameof(Model.TotalPupilsFrom)" type="text" value="@valueFrom">
            </div>
            <div class="govuk-grid-column-one-quarter">
                <label class="govuk-label" for="@nameof(Model.TotalPupilsTo)">
                    To
                </label>
                <input class="govuk-input govuk-input--width-5 @(ViewData.ModelState.HasError(nameof(Model.TotalPupilsTo)) ? "govuk-input--error" : string.Empty)" id="@nameof(Model.TotalPupilsTo)" name="@nameof(Model.TotalPupilsTo)" type="text" value="@valueTo">
            </div>
        </fieldset>
    </div>
</div>