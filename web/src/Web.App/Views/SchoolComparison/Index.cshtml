@model Web.App.ViewModels.SchoolComparisonViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.Comparison;
    var hasUserDefinedSet = !string.IsNullOrEmpty(Model.UserDefinedSetId);
    var hasCustomData = !string.IsNullOrEmpty(Model.CustomDataId);
    var hasMissingComparatorSet = !hasUserDefinedSet && !Model.HasDefaultComparatorSet;
}

@if (Model is { PeriodCoveredByReturn: < 12 })
{
    @await Html.PartialAsync("_IncompleteFinances")
}

@if (!hasMissingComparatorSet)
{
    @await Html.PartialAsync("_SaveChartsButton", null, new ViewDataDictionary(ViewData)
    {
        { "FileName", $"benchmark-spending-{Model.Urn}.zip" }
    })
}

@await Component.InvokeAsync("EstablishmentHeading", new
{
    title = ViewData[ViewDataKeys.Title],
    name = Model.Name,
    id = Model.Urn,
    kind = OrganisationTypes.School
})

@if (!hasMissingComparatorSet)
{
    @await Component.InvokeAsync("DataSource", new
    {
        organisationType = OrganisationTypes.School,
        sourceType = DataSourceTypes.Spending,
        isPartOfTrust = Model.IsPartOfTrust,
        additionText = new[]
        {
            "Benchmark your spending against similar schools."
        }
    })
}

@await Component.InvokeAsync("ComparatorSetDetails", new
{
    identifier = Model.Urn,
    hasUserDefinedSet,
    hasCustomData,
    hasMissingComparatorSet
})

@if (!hasMissingComparatorSet)
{
    <div id="compare-your-costs" data-type="@OrganisationTypes.School" data-id="@Model.Urn" data-suppress-negative-or-zero="true"></div>
}

@await Component.InvokeAsync("SchoolFinanceTools", new
{
    identifier = Model.Urn,
    tools = new[]
    {
        FinanceTools.FinancialPlanning,
        FinanceTools.BenchmarkCensus
    }
})