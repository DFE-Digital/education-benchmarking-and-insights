@using Web.App.Extensions
@using Web.App.ViewModels
@using Web.App.ViewModels.Enhancements
@model Web.App.ViewModels.SchoolComparisonItSpendViewModel
@{
    ViewData[ViewDataKeys.Title] = PageTitles.ComparisonItSpend;
}

@await Component.InvokeAsync("EstablishmentHeading", new
{
    title = ViewData[ViewDataKeys.Title],
    name = Model.Name,
    id = Model.Urn,
    kind = OrganisationTypes.School
})

<div class="govuk-grid-row govuk-!-margin-bottom-6">
    <div class="govuk-grid-column-two-thirds">
        <p class="govuk-body">
            <a class="govuk-link govuk-link--no-visited-state"
               href="@Url.Action("Index", "SchoolComparators", new { urn = Model.Urn })"
               data-test-id="comparators-link">We've chosen 2 sets of similar schools</a>
            to benchmark this school's spending against.
        </p>
    </div>
</div>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-one-third">
        @await Html.PartialAsync("_ItSpendFilter", Model)
    </div>
    <div class="govuk-grid-column-two-thirds">
        @for (var i = 0; i < Model.SubCategories.Count; i++)
        {
            var subCategory = Model.SubCategories.ElementAt(i);
            var uuid = Guid.NewGuid();

            <section id="cost-sub-category-@subCategory.SubCategory?.ToSlug()">
                <h2 class="govuk-heading-m">@subCategory.SubCategory</h2>

                @if (Model.ViewAs == SchoolComparisonItSpendViewModel.ViewAsOptions.Chart)
                {
                    @await Html.PartialAsync("_ItSpendChart", new SchoolComparisonItSpendChartViewModel(uuid, subCategory))
                    @if (i <= Model.SubCategories.Count)
                    {
                        <hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible govuk-!-margin-bottom-6">
                    }
                }
                else
                {
                    @await Html.PartialAsync("_ItSpendTable", new SchoolComparisonItSpendTableViewModel(Model.Urn, Model.ResultAs, subCategory))
                }
            </section>
        }

        @if (Model.ViewAs == SchoolComparisonItSpendViewModel.ViewAsOptions.Table)
        {
            for (var i = 0; i < Model.PartYearData.Length; i++)
            {
                var school = Model.PartYearData.ElementAt(i);
                if (i == 0)
                {
                    <h2 class="govuk-heading-s">Schools with partial data available</h2>
                }

                <p class="govuk-body-s govuk-!-margin-bottom-1">
                    @school.SchoolName only
                    has @school.PeriodCoveredByReturn @(school.PeriodCoveredByReturn == 1 ? "month" : "months") of data
                    available.
                </p>
            }
        }
    </div>
</div>


@section scripts
{
    <script type="module" add-nonce="true">
        import {initAll} from '/js/govuk-frontend.min.js'

        initAll()
    </script>

    @await Html.PartialAsync("_SchoolChartTooltip", new SchoolChartTooltipViewModel
    {
        Data = Model.TooltipData
    })

    @await Html.PartialAsync("Enhancements/_PageActions", new PageActionsViewModel
    {
        All = true,
        ElementId = "page-actions-button",
        SaveClassName = "costs-chart-container",
        SaveFileName = $"benchmark-it-spending-{Model.Urn}.zip",
        SaveTitleAttr = "data-title",
        StartImmediately = true
    })
}