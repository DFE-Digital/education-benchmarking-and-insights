parameters:
  BuildVersion: ''
  BuildNumber: ''
  
steps:

  - task: Npm@1
    displayName: 'Install npm packages'
    inputs:
      command: 'install'
      workingDir: 'web/src/Web.App'
      verbose: false

  - task: Npm@1
    displayName: 'Run front-end build task' 
    inputs:
      command: 'custom'
      customCommand: 'run-script build'
      workingDir: 'web/src/Web.App'
      verbose: false

  - bash: |
      echo "##vso[task.setvariable variable=WEB_CACHE_RESTORED]false"
      echo "##vso[task.setvariable variable=WEB_NUGET_CACHE]$(Pipeline.Workspace)/web/.nuget"

  - task: NuGetAuthenticate@1

  - task: Cache@2
    condition: not(contains(variables['Build.SourceVersionMessage'], '[no cache]'))
    displayName: 'Cache nuget packages'
    inputs:
      key: 'nuget | "$(Agent.OS)-web" | web/src/**/packages.lock.json,!**/bin/**,!**/obj/**'
      path: $(WEB_NUGET_CACHE)
      cacheHitVar: WEB_CACHE_RESTORED

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    condition: ne(variables.WEB_CACHE_RESTORED, 'true')
    inputs:
      command: restore
      packagesDirectory: $(WEB_NUGET_CACHE)
      projects: |
        web/src/**/*.csproj
      feedsToUse: 'config'
      nugetConfigPath: 'web/nuget.config'
      
  - task: DotNetCoreCLI@2
    displayName: 'Build web'
    inputs:
      command: publish
      publishWebProjects: false
      packagesDirectory: $(WEB_NUGET_CACHE)
      projects: 'web/src/Web/Web.App.csproj'
      arguments: '-c Release -r linux-x64 -p:PublishReadyToRun=true -o $(Build.ArtifactStagingDirectory)/web /p:Version=${{ parameters.BuildVersion }} /p:InformationalVersion=${{ parameters.BuildNumber }}'
      zipAfterPublish: true
      modifyOutputPath: true

  - publish: $(build.artifactstagingdirectory)/web
    displayName: 'Publish web artifacts'
    artifact: web