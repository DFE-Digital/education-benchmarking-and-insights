parameters:
  subscription: ''
  environmentPrefix: ''
  environment: ''
  cipEnvironment: ''
  workspaceDir: '$(Pipeline.Workspace)'
  terraformArchive: '$(Pipeline.Workspace)/terraform/terraform.zip'
  location: 'westeurope'

jobs:
  - deployment: RunTerraform
    displayName: 'Run terraform'
    pool:
      vmImage: ubuntu-latest
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none

            - download: current

            - task: ExtractFiles@1
              displayName: 'Extract terraform Files'
              inputs:
                archiveFilePatterns: ${{ parameters.terraformArchive }}
                destinationFolder: '${{ parameters.workspaceDir }}/tf'

            - task: AzureCLI@1
              displayName: 'Create terraform dependencies'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                scriptLocation: inlineScript
                inlineScript: |
                  az group create --location ${{ parameters.location }} --name ${{ parameters.environmentPrefix }}-ebis-terraform --tags "Environment=${{ parameters.cipEnvironment }}" "Product=DfE Financial Benchmarking service" "DfE Financial Benchmarking service"
                  echo "Resource group created"
                  
                  az storage account create --name ${{ parameters.environmentPrefix }}storagetf --resource-group ${{ parameters.environmentPrefix }}-ebis-terraform --location ${{ parameters.location }} --sku Standard_LRS
                  echo "Storage account created"
                  
                  az storage container create --auth-mode login --name tfstate --account-name ${{ parameters.environmentPrefix }}storagetf
                  echo "Storage container created"
                  
                  echo "##vso[task.setvariable variable=environmentPrefix]${{ parameters.environmentPrefix }}"
                  echo "##vso[task.setvariable variable=environment]${{ parameters.environment }}"
                  echo "##vso[task.setvariable variable=cipEnvironment]${{ parameters.cipEnvironment }}"
                  echo "##vso[task.setvariable variable=location]${{ parameters.location }}"
                  
            - task: qetza.replacetokens.replacetokens-task.replacetokens@3
              displayName: 'Replace tokens in terraform file'
              inputs:
                targetFiles: '${{ parameters.workspaceDir }}/tf/terraform.tfvars'
                escapeType: none
                tokenPrefix: '__'
                tokenSuffix: '__'

            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
              displayName: 'Terraform : install'
              inputs:
                terraformVersion: 1.6.6

            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
              displayName: 'Terraform : init'
              inputs:
                command: init
                backendType: 'azurerm'
                workingDirectory: '${{ parameters.workspaceDir }}/tf'
                environmentServiceName: ${{ parameters.subscription }}
                backendServiceArm: ${{ parameters.subscription }}
                backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
                backendAzureRmStorageAccountName: '${{ parameters.environmentPrefix }}storagetf'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: education-benchmarking-platform.tfstate
                backendAzureRmResourceGroupLocation: ${{ parameters.location }}

            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
              displayName: 'Terraform : plan'
              inputs:
                command: plan
                backendType: 'azurerm'
                commandOptions: '-input=false -out=${{ parameters.workspaceDir }}\education-benchmarking-platform.plan'
                workingDirectory: '${{ parameters.workspaceDir }}/tf'
                environmentServiceName: ${{ parameters.subscription }}
                backendServiceArm: ${{ parameters.subscription }}
                backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
                backendAzureRmStorageAccountName: '${{ parameters.environmentPrefix }}storagetf'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: education-benchmarking-platform.tfstate
                publishPlanResults: '${{ parameters.environmentPrefix }}-platform-plan'
                backendAzureRmResourceGroupLocation: ${{ parameters.location }}

            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
              displayName: 'Terraform : apply'
              inputs:
                command: apply
                backendType: 'azurerm'
                workingDirectory: '${{ parameters.workspaceDir }}/tf'
                commandOptions: '-auto-approve -input=false ${{ parameters.workspaceDir }}\education-benchmarking-platform.plan'
                environmentServiceName: ${{ parameters.subscription }}
                backendServiceArm: ${{ parameters.subscription }}
                backendAzureRmResourceGroupName: ${{ parameters.environmentPrefix }}-ebis-terraform
                backendAzureRmStorageAccountName: '${{ parameters.environmentPrefix }}storagetf'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: education-benchmarking-platform.tfstate
                backendAzureRmResourceGroupLocation: ${{ parameters.location }}
                
  - deployment: Deploy
    dependsOn: [RunTerraform]
    displayName: 'Deploy platform'
    pool:
      vmImage: ubuntu-latest
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none
            - download: current            
            - task: AzureKeyVault@1
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                KeyVaultName: '${{ parameters.environmentPrefix }}-ebis-keyvault'
                SecretsFilter: '*'
                RunAsPreJob: true

            - task: ExtractFiles@1
              displayName: 'Extract platform search app'
              inputs:
                archiveFilePatterns: '${{ parameters.workspaceDir }}/platform-search/EducationBenchmarking.Platform.Search.App.zip'
                destinationFolder: '${{ parameters.workspaceDir }}/search-app'
            
            - script: EducationBenchmarking.Platform.Search.App.exe -s "${{ parameters.environmentPrefix }}-ebis-search" -k "$(ebis-search-admin-key)" -c "$(ebis-cdb-connection-string)" -d "ebis-data" -l "fibre-directory" -p "$(platform-storage-connection-string)" -a "local-authorities"
              displayName: 'Run platform search app'    
              workingDirectory: '${{ parameters.workspaceDir }}/search-app'
              failOnStderr: true

            - task: AzureFunctionApp@1
              displayName: 'Deploy benchmarks function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-benchmark-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/EducationBenchmarking.Platform.Api.Benchmark.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'

            - task: AzureFunctionApp@1
              displayName: 'Deploy insights function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-insight-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/EducationBenchmarking.Platform.Api.Insight.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'
                
            - task: AzureFunctionApp@1
              displayName: 'Deploy establishments function app'
              inputs:
                azureSubscription: ${{ parameters.subscription }}
                appType: functionApp
                appName: '${{ parameters.environmentPrefix }}-ebis-establishment-fa'
                deployToSlotOrASE: true
                resourceGroupName: '${{ parameters.environmentPrefix }}-ebis-platform'
                package: '${{ parameters.workspaceDir }}/platform-apis/EducationBenchmarking.Platform.Api.Establishment.zip'
                slotName: production
                appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1'
                DeploymentType: 'runFromZip'