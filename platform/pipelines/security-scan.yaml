pool:
  vmImage: 'ubuntu-20.04'

variables:
  - name: 'zapDir'
    value: '$(Pipeline.Workspace)/zap'
  - name: 'cacheKey'
    value: $[format('{0:yyyyMMdd}', pipeline.startTime)]

trigger: none

jobs:
  - job: Setup
    displayName: 'Pull and cache docker image'
    steps:
      - checkout: none
      - task: Cache@2
        displayName: Cache task
        inputs:
          key: 'docker | "$(Agent.OS)" | zap-$(cacheKey)'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED

      - task: Docker@2
        displayName: Docker pull
        condition: ne(variables.CACHE_RESTORED, 'true')
        inputs:
          command: pull
          arguments: ictu/zap2docker-weekly

      - script: |
          mkdir -p $(Pipeline.Workspace)/docker
          docker save -o $(Pipeline.Workspace)/docker/zap.tar ictu/zap2docker-weekly
        displayName: Docker save
        condition: ne(variables.CACHE_RESTORED, 'true')

  - job: RunScan
    displayName: 'Run scan'
    dependsOn: [ Setup ]
    timeoutInMinutes: 0
    strategy:
      maxParallel: 3
      matrix:
        benchmark:
          url: https://s198d01-ebis-benchmark-fa.azurewebsites.net/api/swagger/json
          key: benchmark
        establishment:
          url: https://s198d01-ebis-establishment-fa.azurewebsites.net/api/swagger/json
          key: establishment
        insight:
          url: https://s198d01-ebis-insight-fa.azurewebsites.net/api/swagger/json
          key: insight
    steps:
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: 's198d.azdo-deployment'
          KeyVaultName: 's198d01-ebis-keyvault'
          SecretsFilter: '*'
          RunAsPreJob: true

      - task: Cache@2
        displayName: 'Cache restore'
        inputs:
          key: 'docker | "$(Agent.OS)" | zap-$(cacheKey)'
          path: $(Pipeline.Workspace)/docker
          cacheHitVar: CACHE_RESTORED

      - script: |
          docker load -i $(Pipeline.Workspace)/docker/zap.tar
        displayName: 'Docker restore'
        condition: eq(variables.CACHE_RESTORED, 'true')

      - task: CmdLine@2
        inputs:
          script: 'mkdir $(zapDir)'
        displayName: "Create zap directory"

      - task: CmdLine@2
        inputs:
          script: 'chmod 777 -R $(zapDir)'
        displayName: "Set chmod permissions"

      - task: qetza.replacetokens.replacetokens-task.replacetokens@6
        displayName: 'Replace tokens in file'
        inputs:
          sources: '$(Build.SourcesDirectory)/platform/pipelines/zaproxy/*.prop'
          escape: off
          tokenPattern: doubleunderscores

      - task: CmdLine@2
        inputs:
          script: 'cp $(Build.SourcesDirectory)/platform/pipelines/zaproxy/$(key).prop $(zapDir)'
        displayName: "Copy options file"

      - task: CmdLine@2
        inputs:
          script: 'cp $(Build.SourcesDirectory)/platform/pipelines/zaproxy/.artifactignore $(zapDir)'
        displayName: "Copy ignore file"

      - task: Docker@2
        displayName: 'Execute scan'
        continueOnError: true
        inputs:
          command: run
          arguments: --rm -v $(zapDir):/zap/wrk/:rw -t ictu/zap2docker-weekly zap-api-scan.py -t $(url) -f openapi -r report.html -z "-configfile /zap/wrk/$(key).prop"

      - task: PublishPipelineArtifact@1
        displayName: "Publish reports"
        inputs:
          targetPath: '$(zapDir)'
          artifact: '$(key)'
          publishLocation: 'pipeline'
